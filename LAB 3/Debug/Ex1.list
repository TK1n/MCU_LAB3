
Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002edc  08002edc  00012edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f00  08002f00  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002f00  08002f00  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f00  08002f00  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000054  08002f5c  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002f5c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ba8  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b84  00000000  00000000  00029c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016db8  00000000  00000000  0002cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d45a  00000000  00000000  00043a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082530  00000000  00000000  00050ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d33d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b14  00000000  00000000  000d3428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ec4 	.word	0x08002ec4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08002ec4 	.word	0x08002ec4

0800014c <subKeyProcess1>:
int KeyReg13 = NORMAL_STATE;
int KeyReg23 = NORMAL_STATE;
int KeyReg33 = NORMAL_STATE;
int TimerForKeyPress3 = 500;

void subKeyProcess1(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	//TODO
	button1_flag = 1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <subKeyProcess1+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000070 	.word	0x20000070

08000164 <isButton1Pressed>:
int isButton1Pressed(){
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 8000168:	4b06      	ldr	r3, [pc, #24]	; (8000184 <isButton1Pressed+0x20>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d104      	bne.n	800017a <isButton1Pressed+0x16>
		button1_flag = 0;
 8000170:	4b04      	ldr	r3, [pc, #16]	; (8000184 <isButton1Pressed+0x20>)
 8000172:	2200      	movs	r2, #0
 8000174:	601a      	str	r2, [r3, #0]
		return 1;
 8000176:	2301      	movs	r3, #1
 8000178:	e000      	b.n	800017c <isButton1Pressed+0x18>
	}
	return 0;
 800017a:	2300      	movs	r3, #0
}
 800017c:	4618      	mov	r0, r3
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000070 	.word	0x20000070

08000188 <isButton2Pressed>:
int isButton2Pressed(){
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <isButton2Pressed+0x20>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d104      	bne.n	800019e <isButton2Pressed+0x16>
		button2_flag = 0;
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <isButton2Pressed+0x20>)
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
		return 1;
 800019a:	2301      	movs	r3, #1
 800019c:	e000      	b.n	80001a0 <isButton2Pressed+0x18>
	}
	return 0;
 800019e:	2300      	movs	r3, #0
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000074 	.word	0x20000074

080001ac <isButton3Pressed>:
int isButton3Pressed(){
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 80001b0:	4b06      	ldr	r3, [pc, #24]	; (80001cc <isButton3Pressed+0x20>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d104      	bne.n	80001c2 <isButton3Pressed+0x16>
		button3_flag = 0;
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <isButton3Pressed+0x20>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
		return 1;
 80001be:	2301      	movs	r3, #1
 80001c0:	e000      	b.n	80001c4 <isButton3Pressed+0x18>
	}
	return 0;
 80001c2:	2300      	movs	r3, #0
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	20000078 	.word	0x20000078

080001d0 <subKeyProcess2>:
void subKeyProcess2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	//TODO
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000074 	.word	0x20000074

080001e8 <subKeyProcess3>:
void subKeyProcess3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	//TODO
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000078 	.word	0x20000078

08000200 <getKeyInput1>:
void getKeyInput1(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg01 = KeyReg11;
 8000204:	4b20      	ldr	r3, [pc, #128]	; (8000288 <getKeyInput1+0x88>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a20      	ldr	r2, [pc, #128]	; (800028c <getKeyInput1+0x8c>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg11 = KeyReg21;
 800020c:	4b20      	ldr	r3, [pc, #128]	; (8000290 <getKeyInput1+0x90>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <getKeyInput1+0x88>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg21 = HAL_GPIO_ReadPin(BTN1_GPIO_Port,BTN1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	481e      	ldr	r0, [pc, #120]	; (8000294 <getKeyInput1+0x94>)
 800021a:	f001 fe33 	bl	8001e84 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <getKeyInput1+0x90>)
 8000224:	601a      	str	r2, [r3, #0]
	if ((KeyReg01 == KeyReg11) && (KeyReg11 == KeyReg21)){
 8000226:	4b19      	ldr	r3, [pc, #100]	; (800028c <getKeyInput1+0x8c>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b17      	ldr	r3, [pc, #92]	; (8000288 <getKeyInput1+0x88>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d128      	bne.n	8000284 <getKeyInput1+0x84>
 8000232:	4b15      	ldr	r3, [pc, #84]	; (8000288 <getKeyInput1+0x88>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <getKeyInput1+0x90>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d122      	bne.n	8000284 <getKeyInput1+0x84>
		if (KeyReg31 != KeyReg21){
 800023e:	4b16      	ldr	r3, [pc, #88]	; (8000298 <getKeyInput1+0x98>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <getKeyInput1+0x90>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00a      	beq.n	8000260 <getKeyInput1+0x60>
			KeyReg31 = KeyReg21;
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <getKeyInput1+0x90>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a12      	ldr	r2, [pc, #72]	; (8000298 <getKeyInput1+0x98>)
 8000250:	6013      	str	r3, [r2, #0]
			if (KeyReg21 == PRESSED_STATE){
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <getKeyInput1+0x90>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d114      	bne.n	8000284 <getKeyInput1+0x84>
				//TODO
				subKeyProcess1();
 800025a:	f7ff ff77 	bl	800014c <subKeyProcess1>
					subKeyProcess1();
				}
			}
		}
	}
}
 800025e:	e011      	b.n	8000284 <getKeyInput1+0x84>
			TimerForKeyPress1--;
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <getKeyInput1+0x9c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	3b01      	subs	r3, #1
 8000266:	4a0d      	ldr	r2, [pc, #52]	; (800029c <getKeyInput1+0x9c>)
 8000268:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress1 == 0){
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <getKeyInput1+0x9c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d108      	bne.n	8000284 <getKeyInput1+0x84>
				TimerForKeyPress1 = 200;
 8000272:	4b0a      	ldr	r3, [pc, #40]	; (800029c <getKeyInput1+0x9c>)
 8000274:	22c8      	movs	r2, #200	; 0xc8
 8000276:	601a      	str	r2, [r3, #0]
				if (KeyReg21 == PRESSED_STATE){
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <getKeyInput1+0x90>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d101      	bne.n	8000284 <getKeyInput1+0x84>
					subKeyProcess1();
 8000280:	f7ff ff64 	bl	800014c <subKeyProcess1>
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000004 	.word	0x20000004
 800028c:	20000000 	.word	0x20000000
 8000290:	20000008 	.word	0x20000008
 8000294:	40011000 	.word	0x40011000
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000010 	.word	0x20000010

080002a0 <getKeyInput2>:
void getKeyInput2(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	KeyReg02 = KeyReg12;
 80002a4:	4b20      	ldr	r3, [pc, #128]	; (8000328 <getKeyInput2+0x88>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a20      	ldr	r2, [pc, #128]	; (800032c <getKeyInput2+0x8c>)
 80002aa:	6013      	str	r3, [r2, #0]
	KeyReg12 = KeyReg22;
 80002ac:	4b20      	ldr	r3, [pc, #128]	; (8000330 <getKeyInput2+0x90>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a1d      	ldr	r2, [pc, #116]	; (8000328 <getKeyInput2+0x88>)
 80002b2:	6013      	str	r3, [r2, #0]
	KeyReg22 = HAL_GPIO_ReadPin(BTN2_GPIO_Port,BTN2_Pin);
 80002b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b8:	481e      	ldr	r0, [pc, #120]	; (8000334 <getKeyInput2+0x94>)
 80002ba:	f001 fde3 	bl	8001e84 <HAL_GPIO_ReadPin>
 80002be:	4603      	mov	r3, r0
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <getKeyInput2+0x90>)
 80002c4:	601a      	str	r2, [r3, #0]
	if ( (KeyReg02 == KeyReg12) && (KeyReg12 == KeyReg22) ){
 80002c6:	4b19      	ldr	r3, [pc, #100]	; (800032c <getKeyInput2+0x8c>)
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <getKeyInput2+0x88>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d128      	bne.n	8000324 <getKeyInput2+0x84>
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <getKeyInput2+0x88>)
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	4b16      	ldr	r3, [pc, #88]	; (8000330 <getKeyInput2+0x90>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d122      	bne.n	8000324 <getKeyInput2+0x84>
		if (KeyReg32 != KeyReg22){
 80002de:	4b16      	ldr	r3, [pc, #88]	; (8000338 <getKeyInput2+0x98>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	4b13      	ldr	r3, [pc, #76]	; (8000330 <getKeyInput2+0x90>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d00a      	beq.n	8000300 <getKeyInput2+0x60>
			KeyReg32 = KeyReg22;
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <getKeyInput2+0x90>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <getKeyInput2+0x98>)
 80002f0:	6013      	str	r3, [r2, #0]
			if (KeyReg22 == PRESSED_STATE){
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <getKeyInput2+0x90>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d114      	bne.n	8000324 <getKeyInput2+0x84>
				//TODO
				subKeyProcess2();
 80002fa:	f7ff ff69 	bl	80001d0 <subKeyProcess2>
					subKeyProcess2();
				}
			}
		}
	}
}
 80002fe:	e011      	b.n	8000324 <getKeyInput2+0x84>
			TimerForKeyPress2--;
 8000300:	4b0e      	ldr	r3, [pc, #56]	; (800033c <getKeyInput2+0x9c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	3b01      	subs	r3, #1
 8000306:	4a0d      	ldr	r2, [pc, #52]	; (800033c <getKeyInput2+0x9c>)
 8000308:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress2 == 0){
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <getKeyInput2+0x9c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d108      	bne.n	8000324 <getKeyInput2+0x84>
				TimerForKeyPress2 = 200;
 8000312:	4b0a      	ldr	r3, [pc, #40]	; (800033c <getKeyInput2+0x9c>)
 8000314:	22c8      	movs	r2, #200	; 0xc8
 8000316:	601a      	str	r2, [r3, #0]
				if (KeyReg22 == PRESSED_STATE){
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <getKeyInput2+0x90>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d101      	bne.n	8000324 <getKeyInput2+0x84>
					subKeyProcess2();
 8000320:	f7ff ff56 	bl	80001d0 <subKeyProcess2>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000018 	.word	0x20000018
 800032c:	20000014 	.word	0x20000014
 8000330:	2000001c 	.word	0x2000001c
 8000334:	40011000 	.word	0x40011000
 8000338:	20000020 	.word	0x20000020
 800033c:	20000024 	.word	0x20000024

08000340 <getKeyInput3>:
void getKeyInput3(){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	KeyReg03 = KeyReg13;
 8000344:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <getKeyInput3+0x88>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a20      	ldr	r2, [pc, #128]	; (80003cc <getKeyInput3+0x8c>)
 800034a:	6013      	str	r3, [r2, #0]
	KeyReg13 = KeyReg23;
 800034c:	4b20      	ldr	r3, [pc, #128]	; (80003d0 <getKeyInput3+0x90>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a1d      	ldr	r2, [pc, #116]	; (80003c8 <getKeyInput3+0x88>)
 8000352:	6013      	str	r3, [r2, #0]
	KeyReg23 = HAL_GPIO_ReadPin(BTN3_GPIO_Port,BTN3_Pin);
 8000354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000358:	481e      	ldr	r0, [pc, #120]	; (80003d4 <getKeyInput3+0x94>)
 800035a:	f001 fd93 	bl	8001e84 <HAL_GPIO_ReadPin>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <getKeyInput3+0x90>)
 8000364:	601a      	str	r2, [r3, #0]
	if ( (KeyReg03 == KeyReg13) && (KeyReg13 == KeyReg23) ){
 8000366:	4b19      	ldr	r3, [pc, #100]	; (80003cc <getKeyInput3+0x8c>)
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <getKeyInput3+0x88>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	429a      	cmp	r2, r3
 8000370:	d128      	bne.n	80003c4 <getKeyInput3+0x84>
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <getKeyInput3+0x88>)
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <getKeyInput3+0x90>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	429a      	cmp	r2, r3
 800037c:	d122      	bne.n	80003c4 <getKeyInput3+0x84>
		if (KeyReg33 != KeyReg23){
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <getKeyInput3+0x98>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <getKeyInput3+0x90>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	429a      	cmp	r2, r3
 8000388:	d00a      	beq.n	80003a0 <getKeyInput3+0x60>
			KeyReg33 = KeyReg23;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <getKeyInput3+0x90>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <getKeyInput3+0x98>)
 8000390:	6013      	str	r3, [r2, #0]
			if (KeyReg23 == PRESSED_STATE){
 8000392:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <getKeyInput3+0x90>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d114      	bne.n	80003c4 <getKeyInput3+0x84>
				//TODO
				subKeyProcess3();
 800039a:	f7ff ff25 	bl	80001e8 <subKeyProcess3>
					subKeyProcess3();
				}
			}
		}
	}
}
 800039e:	e011      	b.n	80003c4 <getKeyInput3+0x84>
			TimerForKeyPress3--;
 80003a0:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <getKeyInput3+0x9c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	3b01      	subs	r3, #1
 80003a6:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <getKeyInput3+0x9c>)
 80003a8:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress3 == 0) {
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <getKeyInput3+0x9c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d108      	bne.n	80003c4 <getKeyInput3+0x84>
				TimerForKeyPress3 = 200;
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <getKeyInput3+0x9c>)
 80003b4:	22c8      	movs	r2, #200	; 0xc8
 80003b6:	601a      	str	r2, [r3, #0]
				if (KeyReg23 == PRESSED_STATE){
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <getKeyInput3+0x90>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d101      	bne.n	80003c4 <getKeyInput3+0x84>
					subKeyProcess3();
 80003c0:	f7ff ff12 	bl	80001e8 <subKeyProcess3>
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	2000002c 	.word	0x2000002c
 80003cc:	20000028 	.word	0x20000028
 80003d0:	20000030 	.word	0x20000030
 80003d4:	40011000 	.word	0x40011000
 80003d8:	20000034 	.word	0x20000034
 80003dc:	20000038 	.word	0x20000038

080003e0 <getKeyInputFor3Button>:

void getKeyInputFor3Button(){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	getKeyInput1();
 80003e4:	f7ff ff0c 	bl	8000200 <getKeyInput1>
	getKeyInput2();
 80003e8:	f7ff ff5a 	bl	80002a0 <getKeyInput2>
	getKeyInput3();
 80003ec:	f7ff ffa8 	bl	8000340 <getKeyInput3>
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <fsm_automatic_run>:
int led_index = 0;
int counter0 = 0;
int counter1 = 0;
int counter2 = 0;
int counter3 = 0;
void fsm_automatic_run(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	switch(status){
 80003f8:	4b97      	ldr	r3, [pc, #604]	; (8000658 <fsm_automatic_run+0x264>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	2b05      	cmp	r3, #5
 8000400:	f200 811e 	bhi.w	8000640 <fsm_automatic_run+0x24c>
 8000404:	a201      	add	r2, pc, #4	; (adr r2, 800040c <fsm_automatic_run+0x18>)
 8000406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040a:	bf00      	nop
 800040c:	08000425 	.word	0x08000425
 8000410:	0800048f 	.word	0x0800048f
 8000414:	080004fd 	.word	0x080004fd
 8000418:	08000569 	.word	0x08000569
 800041c:	080005d5 	.word	0x080005d5
 8000420:	08000469 	.word	0x08000469
	case INIT:
		//TODO
		status = MODE1;
 8000424:	4b8c      	ldr	r3, [pc, #560]	; (8000658 <fsm_automatic_run+0x264>)
 8000426:	2206      	movs	r2, #6
 8000428:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2102      	movs	r1, #2
 800042e:	488b      	ldr	r0, [pc, #556]	; (800065c <fsm_automatic_run+0x268>)
 8000430:	f001 fd3f 	bl	8001eb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GRN1_GPIO_Port, GRN1_Pin, RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2108      	movs	r1, #8
 8000438:	4888      	ldr	r0, [pc, #544]	; (800065c <fsm_automatic_run+0x268>)
 800043a:	f001 fd3a 	bl	8001eb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YLW1_GPIO_Port, YLW1_Pin, RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2104      	movs	r1, #4
 8000442:	4886      	ldr	r0, [pc, #536]	; (800065c <fsm_automatic_run+0x268>)
 8000444:	f001 fd35 	bl	8001eb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2110      	movs	r1, #16
 800044c:	4883      	ldr	r0, [pc, #524]	; (800065c <fsm_automatic_run+0x268>)
 800044e:	f001 fd30 	bl	8001eb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GRN2_GPIO_Port, GRN2_Pin, RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2140      	movs	r1, #64	; 0x40
 8000456:	4881      	ldr	r0, [pc, #516]	; (800065c <fsm_automatic_run+0x268>)
 8000458:	f001 fd2b 	bl	8001eb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YLW2_GPIO_Port, YLW2_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2120      	movs	r1, #32
 8000460:	487e      	ldr	r0, [pc, #504]	; (800065c <fsm_automatic_run+0x268>)
 8000462:	f001 fd26 	bl	8001eb2 <HAL_GPIO_WritePin>
		break;
 8000466:	e0f4      	b.n	8000652 <fsm_automatic_run+0x25e>

	case MODE1:
		//TODO
		status = RED1_GRN2;
 8000468:	4b7b      	ldr	r3, [pc, #492]	; (8000658 <fsm_automatic_run+0x264>)
 800046a:	2202      	movs	r2, #2
 800046c:	601a      	str	r2, [r3, #0]
		setTimer0(GREEN * 1000);		//set Timer1 = duration RED
 800046e:	4b7c      	ldr	r3, [pc, #496]	; (8000660 <fsm_automatic_run+0x26c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000476:	fb02 f303 	mul.w	r3, r2, r3
 800047a:	4618      	mov	r0, r3
 800047c:	f001 f856 	bl	800152c <setTimer0>
		setTimer1(10);
 8000480:	200a      	movs	r0, #10
 8000482:	f001 f86f 	bl	8001564 <setTimer1>
		setTimer2(10);
 8000486:	200a      	movs	r0, #10
 8000488:	f001 f888 	bl	800159c <setTimer2>
		break;
 800048c:	e0e1      	b.n	8000652 <fsm_automatic_run+0x25e>
	case RED1_GRN2:
		//TODO
		setRED1();
 800048e:	f000 fcb3 	bl	8000df8 <setRED1>
		setGRN2();
 8000492:	f000 fcf3 	bl	8000e7c <setGRN2>
		if (timer0_flag == 1){
 8000496:	4b73      	ldr	r3, [pc, #460]	; (8000664 <fsm_automatic_run+0x270>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d10b      	bne.n	80004b6 <fsm_automatic_run+0xc2>
			status = RED1_YLW2;
 800049e:	4b6e      	ldr	r3, [pc, #440]	; (8000658 <fsm_automatic_run+0x264>)
 80004a0:	2203      	movs	r2, #3
 80004a2:	601a      	str	r2, [r3, #0]
			setTimer0(YLW * 1000);
 80004a4:	4b70      	ldr	r3, [pc, #448]	; (8000668 <fsm_automatic_run+0x274>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ac:	fb02 f303 	mul.w	r3, r2, r3
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 f83b 	bl	800152c <setTimer0>
		}
		if (timer1_flag == 1){
 80004b6:	4b6d      	ldr	r3, [pc, #436]	; (800066c <fsm_automatic_run+0x278>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d108      	bne.n	80004d0 <fsm_automatic_run+0xdc>
			updateBufferMode1(status);
 80004be:	4b66      	ldr	r3, [pc, #408]	; (8000658 <fsm_automatic_run+0x264>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 fdd4 	bl	8001070 <updateBufferMode1>
			setTimer1(1000);
 80004c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004cc:	f001 f84a 	bl	8001564 <setTimer1>
		}
		if (timer2_flag == 1){
 80004d0:	4b67      	ldr	r3, [pc, #412]	; (8000670 <fsm_automatic_run+0x27c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d107      	bne.n	80004e8 <fsm_automatic_run+0xf4>
			update7SEG(led_index);
 80004d8:	4b66      	ldr	r3, [pc, #408]	; (8000674 <fsm_automatic_run+0x280>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 fd35 	bl	8000f4c <update7SEG>
			setTimer2(100);
 80004e2:	2064      	movs	r0, #100	; 0x64
 80004e4:	f001 f85a 	bl	800159c <setTimer2>
		}
		if (isButton1Pressed() == 1){
 80004e8:	f7ff fe3c 	bl	8000164 <isButton1Pressed>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	f040 80a8 	bne.w	8000644 <fsm_automatic_run+0x250>
			status = MODE2;
 80004f4:	4b58      	ldr	r3, [pc, #352]	; (8000658 <fsm_automatic_run+0x264>)
 80004f6:	2207      	movs	r2, #7
 80004f8:	601a      	str	r2, [r3, #0]
		}
		break;
 80004fa:	e0a3      	b.n	8000644 <fsm_automatic_run+0x250>

	case RED1_YLW2:
		setRED1();
 80004fc:	f000 fc7c 	bl	8000df8 <setRED1>
		setYLW2();
 8000500:	f000 fce8 	bl	8000ed4 <setYLW2>
		if (timer0_flag == 1){
 8000504:	4b57      	ldr	r3, [pc, #348]	; (8000664 <fsm_automatic_run+0x270>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d10b      	bne.n	8000524 <fsm_automatic_run+0x130>
			status = GRN1_RED2;
 800050c:	4b52      	ldr	r3, [pc, #328]	; (8000658 <fsm_automatic_run+0x264>)
 800050e:	2204      	movs	r2, #4
 8000510:	601a      	str	r2, [r3, #0]
			setTimer0(GREEN * 1000);
 8000512:	4b53      	ldr	r3, [pc, #332]	; (8000660 <fsm_automatic_run+0x26c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f001 f804 	bl	800152c <setTimer0>
		}
		if (timer1_flag == 1){
 8000524:	4b51      	ldr	r3, [pc, #324]	; (800066c <fsm_automatic_run+0x278>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d108      	bne.n	800053e <fsm_automatic_run+0x14a>
			setTimer1(1000);
 800052c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000530:	f001 f818 	bl	8001564 <setTimer1>
			updateBufferMode1(status);
 8000534:	4b48      	ldr	r3, [pc, #288]	; (8000658 <fsm_automatic_run+0x264>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fd99 	bl	8001070 <updateBufferMode1>
		}
		if (timer2_flag == 1){
 800053e:	4b4c      	ldr	r3, [pc, #304]	; (8000670 <fsm_automatic_run+0x27c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d107      	bne.n	8000556 <fsm_automatic_run+0x162>
			update7SEG(led_index);
 8000546:	4b4b      	ldr	r3, [pc, #300]	; (8000674 <fsm_automatic_run+0x280>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fcfe 	bl	8000f4c <update7SEG>
			setTimer2(100);
 8000550:	2064      	movs	r0, #100	; 0x64
 8000552:	f001 f823 	bl	800159c <setTimer2>
		}
		if (isButton1Pressed() == 1){
 8000556:	f7ff fe05 	bl	8000164 <isButton1Pressed>
 800055a:	4603      	mov	r3, r0
 800055c:	2b01      	cmp	r3, #1
 800055e:	d173      	bne.n	8000648 <fsm_automatic_run+0x254>
			status = MODE2;
 8000560:	4b3d      	ldr	r3, [pc, #244]	; (8000658 <fsm_automatic_run+0x264>)
 8000562:	2207      	movs	r2, #7
 8000564:	601a      	str	r2, [r3, #0]
		}
		break;
 8000566:	e06f      	b.n	8000648 <fsm_automatic_run+0x254>

	case GRN1_RED2:
		//TODO
		setGRN1();
 8000568:	f000 fc72 	bl	8000e50 <setGRN1>
		setRED2();
 800056c:	f000 fc5a 	bl	8000e24 <setRED2>
		if (timer0_flag == 1){
 8000570:	4b3c      	ldr	r3, [pc, #240]	; (8000664 <fsm_automatic_run+0x270>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d10b      	bne.n	8000590 <fsm_automatic_run+0x19c>
			status = YLW1_RED2;
 8000578:	4b37      	ldr	r3, [pc, #220]	; (8000658 <fsm_automatic_run+0x264>)
 800057a:	2205      	movs	r2, #5
 800057c:	601a      	str	r2, [r3, #0]
			setTimer0(YLW * 1000);
 800057e:	4b3a      	ldr	r3, [pc, #232]	; (8000668 <fsm_automatic_run+0x274>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000586:	fb02 f303 	mul.w	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 ffce 	bl	800152c <setTimer0>
		}
		if (timer1_flag == 1){
 8000590:	4b36      	ldr	r3, [pc, #216]	; (800066c <fsm_automatic_run+0x278>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d108      	bne.n	80005aa <fsm_automatic_run+0x1b6>
			updateBufferMode1(status);
 8000598:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <fsm_automatic_run+0x264>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fd67 	bl	8001070 <updateBufferMode1>
			setTimer1(1000);
 80005a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a6:	f000 ffdd 	bl	8001564 <setTimer1>
		}
		if (timer2_flag == 1){
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <fsm_automatic_run+0x27c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d107      	bne.n	80005c2 <fsm_automatic_run+0x1ce>
			setTimer2(100);
 80005b2:	2064      	movs	r0, #100	; 0x64
 80005b4:	f000 fff2 	bl	800159c <setTimer2>
			update7SEG(led_index);
 80005b8:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <fsm_automatic_run+0x280>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fcc5 	bl	8000f4c <update7SEG>
//			if (led_index >= 3) led_index = 0;
//			else led_index++;
		}
		if (isButton1Pressed() == 1){
 80005c2:	f7ff fdcf 	bl	8000164 <isButton1Pressed>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d13f      	bne.n	800064c <fsm_automatic_run+0x258>
			status = MODE2;
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <fsm_automatic_run+0x264>)
 80005ce:	2207      	movs	r2, #7
 80005d0:	601a      	str	r2, [r3, #0]
		}
		break;
 80005d2:	e03b      	b.n	800064c <fsm_automatic_run+0x258>

	case YLW1_RED2:
		//TODO
		setYLW1();
 80005d4:	f000 fc68 	bl	8000ea8 <setYLW1>
		setRED2();
 80005d8:	f000 fc24 	bl	8000e24 <setRED2>
		if (timer0_flag == 1){
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <fsm_automatic_run+0x270>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d10b      	bne.n	80005fc <fsm_automatic_run+0x208>
			status = RED1_GRN2;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <fsm_automatic_run+0x264>)
 80005e6:	2202      	movs	r2, #2
 80005e8:	601a      	str	r2, [r3, #0]
			setTimer0(GREEN * 1000);
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <fsm_automatic_run+0x26c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f2:	fb02 f303 	mul.w	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 ff98 	bl	800152c <setTimer0>
		}
		if (timer1_flag == 1){
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <fsm_automatic_run+0x278>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d108      	bne.n	8000616 <fsm_automatic_run+0x222>
			setTimer1(1000);
 8000604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000608:	f000 ffac 	bl	8001564 <setTimer1>
			updateBufferMode1(status);
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <fsm_automatic_run+0x264>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fd2d 	bl	8001070 <updateBufferMode1>
		}
		if (timer2_flag == 1){
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <fsm_automatic_run+0x27c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d107      	bne.n	800062e <fsm_automatic_run+0x23a>
			setTimer2(100);
 800061e:	2064      	movs	r0, #100	; 0x64
 8000620:	f000 ffbc 	bl	800159c <setTimer2>
			update7SEG(led_index);
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <fsm_automatic_run+0x280>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fc8f 	bl	8000f4c <update7SEG>
//			if (led_index >= 3) led_index = 0;
//			else led_index++;
		}
		if (isButton1Pressed() == 1){
 800062e:	f7ff fd99 	bl	8000164 <isButton1Pressed>
 8000632:	4603      	mov	r3, r0
 8000634:	2b01      	cmp	r3, #1
 8000636:	d10b      	bne.n	8000650 <fsm_automatic_run+0x25c>
				status = MODE2;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <fsm_automatic_run+0x264>)
 800063a:	2207      	movs	r2, #7
 800063c:	601a      	str	r2, [r3, #0]
		}
		break;
 800063e:	e007      	b.n	8000650 <fsm_automatic_run+0x25c>

	default:
		break;
 8000640:	bf00      	nop
 8000642:	e006      	b.n	8000652 <fsm_automatic_run+0x25e>
		break;
 8000644:	bf00      	nop
 8000646:	e004      	b.n	8000652 <fsm_automatic_run+0x25e>
		break;
 8000648:	bf00      	nop
 800064a:	e002      	b.n	8000652 <fsm_automatic_run+0x25e>
		break;
 800064c:	bf00      	nop
 800064e:	e000      	b.n	8000652 <fsm_automatic_run+0x25e>
		break;
 8000650:	bf00      	nop
	}
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000090 	.word	0x20000090
 800065c:	40010800 	.word	0x40010800
 8000660:	2000003c 	.word	0x2000003c
 8000664:	200000a8 	.word	0x200000a8
 8000668:	20000044 	.word	0x20000044
 800066c:	200000b0 	.word	0x200000b0
 8000670:	200000b8 	.word	0x200000b8
 8000674:	2000007c 	.word	0x2000007c

08000678 <fsm_manual_run>:

#include "fsm_manual.h"
#include "global.h"
#include "led_display.h"

void fsm_manual_run(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	switch(status){
 800067c:	4baa      	ldr	r3, [pc, #680]	; (8000928 <fsm_manual_run+0x2b0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3b07      	subs	r3, #7
 8000682:	2b0a      	cmp	r3, #10
 8000684:	f200 81c5 	bhi.w	8000a12 <fsm_manual_run+0x39a>
 8000688:	a201      	add	r2, pc, #4	; (adr r2, 8000690 <fsm_manual_run+0x18>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006bd 	.word	0x080006bd
 8000694:	080007cd 	.word	0x080007cd
 8000698:	080008ef 	.word	0x080008ef
 800069c:	08000a13 	.word	0x08000a13
 80006a0:	08000a13 	.word	0x08000a13
 80006a4:	0800074f 	.word	0x0800074f
 80006a8:	0800099b 	.word	0x0800099b
 80006ac:	0800085f 	.word	0x0800085f
 80006b0:	080006f7 	.word	0x080006f7
 80006b4:	08000945 	.word	0x08000945
 80006b8:	08000807 	.word	0x08000807
	case MODE2:

		set_led(MAN_RED);
 80006bc:	200c      	movs	r0, #12
 80006be:	f000 fc1f 	bl	8000f00 <set_led>
		led_index = 0;
 80006c2:	4b9a      	ldr	r3, [pc, #616]	; (800092c <fsm_manual_run+0x2b4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]

		updateBufferMode2();
 80006c8:	f000 fd88 	bl	80011dc <updateBufferMode2>
		update7SEG(led_index);
 80006cc:	4b97      	ldr	r3, [pc, #604]	; (800092c <fsm_manual_run+0x2b4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fc3b 	bl	8000f4c <update7SEG>

		setTimer2(500);
 80006d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006da:	f000 ff5f 	bl	800159c <setTimer2>
		setTimer3(500);
 80006de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e2:	f000 ff77 	bl	80015d4 <setTimer3>

		clearTimer0();
 80006e6:	f001 f80f 	bl	8001708 <clearTimer0>
		clearTimer1();
 80006ea:	f001 f81d 	bl	8001728 <clearTimer1>

		status = AUTO_RED;
 80006ee:	4b8e      	ldr	r3, [pc, #568]	; (8000928 <fsm_manual_run+0x2b0>)
 80006f0:	220f      	movs	r2, #15
 80006f2:	601a      	str	r2, [r3, #0]

		break;
 80006f4:	e19a      	b.n	8000a2c <fsm_manual_run+0x3b4>

	case AUTO_RED:
		if (timer3_flag == 1){
 80006f6:	4b8e      	ldr	r3, [pc, #568]	; (8000930 <fsm_manual_run+0x2b8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d106      	bne.n	800070c <fsm_manual_run+0x94>
			setTimer3(500);
 80006fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000702:	f000 ff67 	bl	80015d4 <setTimer3>
			set_led(MAN_RED);
 8000706:	200c      	movs	r0, #12
 8000708:	f000 fbfa 	bl	8000f00 <set_led>
		}
		if (timer2_flag == 1){
 800070c:	4b89      	ldr	r3, [pc, #548]	; (8000934 <fsm_manual_run+0x2bc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d10a      	bne.n	800072a <fsm_manual_run+0xb2>
			setTimer2(500);
 8000714:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000718:	f000 ff40 	bl	800159c <setTimer2>
			updateBufferMode2();
 800071c:	f000 fd5e 	bl	80011dc <updateBufferMode2>
			update7SEG(led_index);
 8000720:	4b82      	ldr	r3, [pc, #520]	; (800092c <fsm_manual_run+0x2b4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fc11 	bl	8000f4c <update7SEG>


		}
		if (isButton1Pressed() == 1){
 800072a:	f7ff fd1b 	bl	8000164 <isButton1Pressed>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	d102      	bne.n	800073a <fsm_manual_run+0xc2>
			status = MODE3;
 8000734:	4b7c      	ldr	r3, [pc, #496]	; (8000928 <fsm_manual_run+0x2b0>)
 8000736:	2208      	movs	r2, #8
 8000738:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed() == 1){
 800073a:	f7ff fd25 	bl	8000188 <isButton2Pressed>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	f040 8168 	bne.w	8000a16 <fsm_manual_run+0x39e>
			status = MAN_RED;
 8000746:	4b78      	ldr	r3, [pc, #480]	; (8000928 <fsm_manual_run+0x2b0>)
 8000748:	220c      	movs	r2, #12
 800074a:	601a      	str	r2, [r3, #0]

		}
		break;
 800074c:	e163      	b.n	8000a16 <fsm_manual_run+0x39e>

	case MAN_RED:
		if (timer3_flag == 1){
 800074e:	4b78      	ldr	r3, [pc, #480]	; (8000930 <fsm_manual_run+0x2b8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d106      	bne.n	8000764 <fsm_manual_run+0xec>
			setTimer3(500);
 8000756:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800075a:	f000 ff3b 	bl	80015d4 <setTimer3>
			set_led(MAN_RED);
 800075e:	200c      	movs	r0, #12
 8000760:	f000 fbce 	bl	8000f00 <set_led>
		}
		if (timer2_flag == 1){
 8000764:	4b73      	ldr	r3, [pc, #460]	; (8000934 <fsm_manual_run+0x2bc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d10a      	bne.n	8000782 <fsm_manual_run+0x10a>
			setTimer2(500);
 800076c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000770:	f000 ff14 	bl	800159c <setTimer2>
			updateBufferMode2();
 8000774:	f000 fd32 	bl	80011dc <updateBufferMode2>
			update7SEG(led_index);
 8000778:	4b6c      	ldr	r3, [pc, #432]	; (800092c <fsm_manual_run+0x2b4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fbe5 	bl	8000f4c <update7SEG>

		}
		if (isButton2Pressed() == 1){
 8000782:	f7ff fd01 	bl	8000188 <isButton2Pressed>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d10e      	bne.n	80007aa <fsm_manual_run+0x132>
			if (RED >= 99) RED = YLW + 1;
 800078c:	4b6a      	ldr	r3, [pc, #424]	; (8000938 <fsm_manual_run+0x2c0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b62      	cmp	r3, #98	; 0x62
 8000792:	dd05      	ble.n	80007a0 <fsm_manual_run+0x128>
 8000794:	4b69      	ldr	r3, [pc, #420]	; (800093c <fsm_manual_run+0x2c4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a67      	ldr	r2, [pc, #412]	; (8000938 <fsm_manual_run+0x2c0>)
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	e004      	b.n	80007aa <fsm_manual_run+0x132>
			else RED++;
 80007a0:	4b65      	ldr	r3, [pc, #404]	; (8000938 <fsm_manual_run+0x2c0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a64      	ldr	r2, [pc, #400]	; (8000938 <fsm_manual_run+0x2c0>)
 80007a8:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed() == 1){
 80007aa:	f7ff fcff 	bl	80001ac <isButton3Pressed>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	f040 8132 	bne.w	8000a1a <fsm_manual_run+0x3a2>
			status = AUTO_RED;
 80007b6:	4b5c      	ldr	r3, [pc, #368]	; (8000928 <fsm_manual_run+0x2b0>)
 80007b8:	220f      	movs	r2, #15
 80007ba:	601a      	str	r2, [r3, #0]
			GREEN = RED - YLW;
 80007bc:	4b5e      	ldr	r3, [pc, #376]	; (8000938 <fsm_manual_run+0x2c0>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b5e      	ldr	r3, [pc, #376]	; (800093c <fsm_manual_run+0x2c4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	4a5e      	ldr	r2, [pc, #376]	; (8000940 <fsm_manual_run+0x2c8>)
 80007c8:	6013      	str	r3, [r2, #0]
		}
		break;
 80007ca:	e126      	b.n	8000a1a <fsm_manual_run+0x3a2>
	case MODE3:
		set_led(MAN_YLW);
 80007cc:	200e      	movs	r0, #14
 80007ce:	f000 fb97 	bl	8000f00 <set_led>

		led_index = 0;
 80007d2:	4b56      	ldr	r3, [pc, #344]	; (800092c <fsm_manual_run+0x2b4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
		updateBufferMode2();
 80007d8:	f000 fd00 	bl	80011dc <updateBufferMode2>
		update7SEG(led_index);
 80007dc:	4b53      	ldr	r3, [pc, #332]	; (800092c <fsm_manual_run+0x2b4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fbb3 	bl	8000f4c <update7SEG>

		setTimer2(500);
 80007e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ea:	f000 fed7 	bl	800159c <setTimer2>
		setTimer3(500);
 80007ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f2:	f000 feef 	bl	80015d4 <setTimer3>

		clearTimer0();
 80007f6:	f000 ff87 	bl	8001708 <clearTimer0>
		clearTimer1();
 80007fa:	f000 ff95 	bl	8001728 <clearTimer1>

		status = AUTO_YLW;
 80007fe:	4b4a      	ldr	r3, [pc, #296]	; (8000928 <fsm_manual_run+0x2b0>)
 8000800:	2211      	movs	r2, #17
 8000802:	601a      	str	r2, [r3, #0]
		break;
 8000804:	e112      	b.n	8000a2c <fsm_manual_run+0x3b4>

	case AUTO_YLW:
		if (timer3_flag == 1){
 8000806:	4b4a      	ldr	r3, [pc, #296]	; (8000930 <fsm_manual_run+0x2b8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d106      	bne.n	800081c <fsm_manual_run+0x1a4>
			setTimer3(500);
 800080e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000812:	f000 fedf 	bl	80015d4 <setTimer3>
			set_led(MAN_YLW);
 8000816:	200e      	movs	r0, #14
 8000818:	f000 fb72 	bl	8000f00 <set_led>
		}

		if (timer2_flag == 1){
 800081c:	4b45      	ldr	r3, [pc, #276]	; (8000934 <fsm_manual_run+0x2bc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d10a      	bne.n	800083a <fsm_manual_run+0x1c2>
			setTimer2(500);
 8000824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000828:	f000 feb8 	bl	800159c <setTimer2>
			updateBufferMode3();
 800082c:	f000 fd02 	bl	8001234 <updateBufferMode3>
			update7SEG(led_index);
 8000830:	4b3e      	ldr	r3, [pc, #248]	; (800092c <fsm_manual_run+0x2b4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fb89 	bl	8000f4c <update7SEG>

		}

		if (isButton1Pressed() == 1){
 800083a:	f7ff fc93 	bl	8000164 <isButton1Pressed>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	d102      	bne.n	800084a <fsm_manual_run+0x1d2>
			status = MODE4;
 8000844:	4b38      	ldr	r3, [pc, #224]	; (8000928 <fsm_manual_run+0x2b0>)
 8000846:	2209      	movs	r2, #9
 8000848:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed() == 1){
 800084a:	f7ff fc9d 	bl	8000188 <isButton2Pressed>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	f040 80e4 	bne.w	8000a1e <fsm_manual_run+0x3a6>
			status = MAN_YLW;
 8000856:	4b34      	ldr	r3, [pc, #208]	; (8000928 <fsm_manual_run+0x2b0>)
 8000858:	220e      	movs	r2, #14
 800085a:	601a      	str	r2, [r3, #0]

		}
		break;
 800085c:	e0df      	b.n	8000a1e <fsm_manual_run+0x3a6>

	case MAN_YLW:
		if (timer3_flag == 1){
 800085e:	4b34      	ldr	r3, [pc, #208]	; (8000930 <fsm_manual_run+0x2b8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d106      	bne.n	8000874 <fsm_manual_run+0x1fc>
			setTimer3(500);
 8000866:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800086a:	f000 feb3 	bl	80015d4 <setTimer3>
			set_led(MAN_YLW);
 800086e:	200e      	movs	r0, #14
 8000870:	f000 fb46 	bl	8000f00 <set_led>
		}

		if (timer2_flag == 1){
 8000874:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <fsm_manual_run+0x2bc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d10a      	bne.n	8000892 <fsm_manual_run+0x21a>
			setTimer2(500);
 800087c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000880:	f000 fe8c 	bl	800159c <setTimer2>
			updateBufferMode3();
 8000884:	f000 fcd6 	bl	8001234 <updateBufferMode3>
			update7SEG(led_index);
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <fsm_manual_run+0x2b4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fb5d 	bl	8000f4c <update7SEG>

		}

		if (isButton2Pressed() == 1){
 8000892:	f7ff fc79 	bl	8000188 <isButton2Pressed>
 8000896:	4603      	mov	r3, r0
 8000898:	2b01      	cmp	r3, #1
 800089a:	d10c      	bne.n	80008b6 <fsm_manual_run+0x23e>
			if (YLW >= 99) YLW = 1;
 800089c:	4b27      	ldr	r3, [pc, #156]	; (800093c <fsm_manual_run+0x2c4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b62      	cmp	r3, #98	; 0x62
 80008a2:	dd03      	ble.n	80008ac <fsm_manual_run+0x234>
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <fsm_manual_run+0x2c4>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	e004      	b.n	80008b6 <fsm_manual_run+0x23e>
			else YLW++;
 80008ac:	4b23      	ldr	r3, [pc, #140]	; (800093c <fsm_manual_run+0x2c4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	4a22      	ldr	r2, [pc, #136]	; (800093c <fsm_manual_run+0x2c4>)
 80008b4:	6013      	str	r3, [r2, #0]
		}

		if (isButton3Pressed() == 1) {
 80008b6:	f7ff fc79 	bl	80001ac <isButton3Pressed>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	f040 80b0 	bne.w	8000a22 <fsm_manual_run+0x3aa>
			status = AUTO_YLW;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <fsm_manual_run+0x2b0>)
 80008c4:	2211      	movs	r2, #17
 80008c6:	601a      	str	r2, [r3, #0]
			if (RED <= YLW) RED = YLW + 1;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <fsm_manual_run+0x2c0>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <fsm_manual_run+0x2c4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dc04      	bgt.n	80008de <fsm_manual_run+0x266>
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <fsm_manual_run+0x2c4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3301      	adds	r3, #1
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <fsm_manual_run+0x2c0>)
 80008dc:	6013      	str	r3, [r2, #0]
			GREEN = RED - YLW;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <fsm_manual_run+0x2c0>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <fsm_manual_run+0x2c4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	4a15      	ldr	r2, [pc, #84]	; (8000940 <fsm_manual_run+0x2c8>)
 80008ea:	6013      	str	r3, [r2, #0]
		}
		break;
 80008ec:	e099      	b.n	8000a22 <fsm_manual_run+0x3aa>

	case MODE4:
		set_led(MAN_GRN);
 80008ee:	200d      	movs	r0, #13
 80008f0:	f000 fb06 	bl	8000f00 <set_led>

		led_index = 0;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <fsm_manual_run+0x2b4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
		updateBufferMode2();
 80008fa:	f000 fc6f 	bl	80011dc <updateBufferMode2>
		update7SEG(led_index);
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <fsm_manual_run+0x2b4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fb22 	bl	8000f4c <update7SEG>

		setTimer2(500);
 8000908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800090c:	f000 fe46 	bl	800159c <setTimer2>
		setTimer3(500);
 8000910:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000914:	f000 fe5e 	bl	80015d4 <setTimer3>
		clearTimer0();
 8000918:	f000 fef6 	bl	8001708 <clearTimer0>
		clearTimer1();
 800091c:	f000 ff04 	bl	8001728 <clearTimer1>

		status = AUTO_GRN;
 8000920:	4b01      	ldr	r3, [pc, #4]	; (8000928 <fsm_manual_run+0x2b0>)
 8000922:	2210      	movs	r2, #16
 8000924:	601a      	str	r2, [r3, #0]
		break;
 8000926:	e081      	b.n	8000a2c <fsm_manual_run+0x3b4>
 8000928:	20000090 	.word	0x20000090
 800092c:	2000007c 	.word	0x2000007c
 8000930:	200000c0 	.word	0x200000c0
 8000934:	200000b8 	.word	0x200000b8
 8000938:	20000040 	.word	0x20000040
 800093c:	20000044 	.word	0x20000044
 8000940:	2000003c 	.word	0x2000003c

	case AUTO_GRN:
		if (timer3_flag == 1){
 8000944:	4b3a      	ldr	r3, [pc, #232]	; (8000a30 <fsm_manual_run+0x3b8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d106      	bne.n	800095a <fsm_manual_run+0x2e2>
			setTimer3(500);
 800094c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000950:	f000 fe40 	bl	80015d4 <setTimer3>
			set_led(MAN_GRN);
 8000954:	200d      	movs	r0, #13
 8000956:	f000 fad3 	bl	8000f00 <set_led>
		}

		if (timer2_flag == 1){
 800095a:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <fsm_manual_run+0x3bc>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d10a      	bne.n	8000978 <fsm_manual_run+0x300>
			setTimer2(500);
 8000962:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000966:	f000 fe19 	bl	800159c <setTimer2>
			updateBufferMode4();
 800096a:	f000 fc8f 	bl	800128c <updateBufferMode4>
			update7SEG(led_index);
 800096e:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <fsm_manual_run+0x3c0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f000 faea 	bl	8000f4c <update7SEG>

		}

		if (isButton1Pressed() == 1){
 8000978:	f7ff fbf4 	bl	8000164 <isButton1Pressed>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d102      	bne.n	8000988 <fsm_manual_run+0x310>
			status = MODE1;
 8000982:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <fsm_manual_run+0x3c4>)
 8000984:	2206      	movs	r2, #6
 8000986:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed() == 1){
 8000988:	f7ff fbfe 	bl	8000188 <isButton2Pressed>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d149      	bne.n	8000a26 <fsm_manual_run+0x3ae>
			status = MAN_GRN;
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <fsm_manual_run+0x3c4>)
 8000994:	220d      	movs	r2, #13
 8000996:	601a      	str	r2, [r3, #0]

		}

		break;
 8000998:	e045      	b.n	8000a26 <fsm_manual_run+0x3ae>
	case MAN_GRN:
		if (timer3_flag == 1){
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <fsm_manual_run+0x3b8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d106      	bne.n	80009b0 <fsm_manual_run+0x338>
			setTimer3(500);
 80009a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a6:	f000 fe15 	bl	80015d4 <setTimer3>
			set_led(MAN_GRN);
 80009aa:	200d      	movs	r0, #13
 80009ac:	f000 faa8 	bl	8000f00 <set_led>
		}
		if (timer2_flag == 1){
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <fsm_manual_run+0x3bc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d10a      	bne.n	80009ce <fsm_manual_run+0x356>
			setTimer2(500);
 80009b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009bc:	f000 fdee 	bl	800159c <setTimer2>
			updateBufferMode4();
 80009c0:	f000 fc64 	bl	800128c <updateBufferMode4>
			update7SEG(led_index);
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <fsm_manual_run+0x3c0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 fabf 	bl	8000f4c <update7SEG>

		}
		if (isButton2Pressed() == 1){
 80009ce:	f7ff fbdb 	bl	8000188 <isButton2Pressed>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d10c      	bne.n	80009f2 <fsm_manual_run+0x37a>
			if (GREEN >= 99) {
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <fsm_manual_run+0x3c8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b62      	cmp	r3, #98	; 0x62
 80009de:	dd03      	ble.n	80009e8 <fsm_manual_run+0x370>
				GREEN = 1;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <fsm_manual_run+0x3c8>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	e004      	b.n	80009f2 <fsm_manual_run+0x37a>
			}
			else GREEN++;
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <fsm_manual_run+0x3c8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <fsm_manual_run+0x3c8>)
 80009f0:	6013      	str	r3, [r2, #0]

		}
		if (isButton3Pressed() == 1){
 80009f2:	f7ff fbdb 	bl	80001ac <isButton3Pressed>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d116      	bne.n	8000a2a <fsm_manual_run+0x3b2>
			status = AUTO_GRN;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <fsm_manual_run+0x3c4>)
 80009fe:	2210      	movs	r2, #16
 8000a00:	601a      	str	r2, [r3, #0]
			RED = GREEN + YLW;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <fsm_manual_run+0x3c8>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <fsm_manual_run+0x3cc>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <fsm_manual_run+0x3d0>)
 8000a0e:	6013      	str	r3, [r2, #0]
		}
		break;
 8000a10:	e00b      	b.n	8000a2a <fsm_manual_run+0x3b2>
	default:
		break;
 8000a12:	bf00      	nop
 8000a14:	e00a      	b.n	8000a2c <fsm_manual_run+0x3b4>
		break;
 8000a16:	bf00      	nop
 8000a18:	e008      	b.n	8000a2c <fsm_manual_run+0x3b4>
		break;
 8000a1a:	bf00      	nop
 8000a1c:	e006      	b.n	8000a2c <fsm_manual_run+0x3b4>
		break;
 8000a1e:	bf00      	nop
 8000a20:	e004      	b.n	8000a2c <fsm_manual_run+0x3b4>
		break;
 8000a22:	bf00      	nop
 8000a24:	e002      	b.n	8000a2c <fsm_manual_run+0x3b4>
		break;
 8000a26:	bf00      	nop
 8000a28:	e000      	b.n	8000a2c <fsm_manual_run+0x3b4>
		break;
 8000a2a:	bf00      	nop
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000c0 	.word	0x200000c0
 8000a34:	200000b8 	.word	0x200000b8
 8000a38:	2000007c 	.word	0x2000007c
 8000a3c:	20000090 	.word	0x20000090
 8000a40:	2000003c 	.word	0x2000003c
 8000a44:	20000044 	.word	0x20000044
 8000a48:	20000040 	.word	0x20000040

08000a4c <display7SEG>:
 *      Author: PC
 */
#include "global.h"
#include "led_display.h"

void display7SEG(int num){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b09      	cmp	r3, #9
 8000a58:	f200 81c8 	bhi.w	8000dec <display7SEG+0x3a0>
 8000a5c:	a201      	add	r2, pc, #4	; (adr r2, 8000a64 <display7SEG+0x18>)
 8000a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a62:	bf00      	nop
 8000a64:	08000a8d 	.word	0x08000a8d
 8000a68:	08000ae3 	.word	0x08000ae3
 8000a6c:	08000b39 	.word	0x08000b39
 8000a70:	08000b8f 	.word	0x08000b8f
 8000a74:	08000be5 	.word	0x08000be5
 8000a78:	08000c3b 	.word	0x08000c3b
 8000a7c:	08000c91 	.word	0x08000c91
 8000a80:	08000ce7 	.word	0x08000ce7
 8000a84:	08000d3d 	.word	0x08000d3d
 8000a88:	08000d93 	.word	0x08000d93
	switch (num){
		case 0:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a92:	48d5      	ldr	r0, [pc, #852]	; (8000de8 <display7SEG+0x39c>)
 8000a94:	f001 fa0d 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9e:	48d2      	ldr	r0, [pc, #840]	; (8000de8 <display7SEG+0x39c>)
 8000aa0:	f001 fa07 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aaa:	48cf      	ldr	r0, [pc, #828]	; (8000de8 <display7SEG+0x39c>)
 8000aac:	f001 fa01 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab6:	48cc      	ldr	r0, [pc, #816]	; (8000de8 <display7SEG+0x39c>)
 8000ab8:	f001 f9fb 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	48c9      	ldr	r0, [pc, #804]	; (8000de8 <display7SEG+0x39c>)
 8000ac4:	f001 f9f5 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ace:	48c6      	ldr	r0, [pc, #792]	; (8000de8 <display7SEG+0x39c>)
 8000ad0:	f001 f9ef 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ada:	48c3      	ldr	r0, [pc, #780]	; (8000de8 <display7SEG+0x39c>)
 8000adc:	f001 f9e9 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8000ae0:	e185      	b.n	8000dee <display7SEG+0x3a2>
		case 1:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae8:	48bf      	ldr	r0, [pc, #764]	; (8000de8 <display7SEG+0x39c>)
 8000aea:	f001 f9e2 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af4:	48bc      	ldr	r0, [pc, #752]	; (8000de8 <display7SEG+0x39c>)
 8000af6:	f001 f9dc 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b00:	48b9      	ldr	r0, [pc, #740]	; (8000de8 <display7SEG+0x39c>)
 8000b02:	f001 f9d6 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0c:	48b6      	ldr	r0, [pc, #728]	; (8000de8 <display7SEG+0x39c>)
 8000b0e:	f001 f9d0 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b18:	48b3      	ldr	r0, [pc, #716]	; (8000de8 <display7SEG+0x39c>)
 8000b1a:	f001 f9ca 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b24:	48b0      	ldr	r0, [pc, #704]	; (8000de8 <display7SEG+0x39c>)
 8000b26:	f001 f9c4 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b30:	48ad      	ldr	r0, [pc, #692]	; (8000de8 <display7SEG+0x39c>)
 8000b32:	f001 f9be 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8000b36:	e15a      	b.n	8000dee <display7SEG+0x3a2>
		case 2:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b3e:	48aa      	ldr	r0, [pc, #680]	; (8000de8 <display7SEG+0x39c>)
 8000b40:	f001 f9b7 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4a:	48a7      	ldr	r0, [pc, #668]	; (8000de8 <display7SEG+0x39c>)
 8000b4c:	f001 f9b1 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b56:	48a4      	ldr	r0, [pc, #656]	; (8000de8 <display7SEG+0x39c>)
 8000b58:	f001 f9ab 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b62:	48a1      	ldr	r0, [pc, #644]	; (8000de8 <display7SEG+0x39c>)
 8000b64:	f001 f9a5 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6e:	489e      	ldr	r0, [pc, #632]	; (8000de8 <display7SEG+0x39c>)
 8000b70:	f001 f99f 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b7a:	489b      	ldr	r0, [pc, #620]	; (8000de8 <display7SEG+0x39c>)
 8000b7c:	f001 f999 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b86:	4898      	ldr	r0, [pc, #608]	; (8000de8 <display7SEG+0x39c>)
 8000b88:	f001 f993 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8000b8c:	e12f      	b.n	8000dee <display7SEG+0x3a2>
		case 3:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b94:	4894      	ldr	r0, [pc, #592]	; (8000de8 <display7SEG+0x39c>)
 8000b96:	f001 f98c 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba0:	4891      	ldr	r0, [pc, #580]	; (8000de8 <display7SEG+0x39c>)
 8000ba2:	f001 f986 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bac:	488e      	ldr	r0, [pc, #568]	; (8000de8 <display7SEG+0x39c>)
 8000bae:	f001 f980 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb8:	488b      	ldr	r0, [pc, #556]	; (8000de8 <display7SEG+0x39c>)
 8000bba:	f001 f97a 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc4:	4888      	ldr	r0, [pc, #544]	; (8000de8 <display7SEG+0x39c>)
 8000bc6:	f001 f974 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd0:	4885      	ldr	r0, [pc, #532]	; (8000de8 <display7SEG+0x39c>)
 8000bd2:	f001 f96e 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bdc:	4882      	ldr	r0, [pc, #520]	; (8000de8 <display7SEG+0x39c>)
 8000bde:	f001 f968 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8000be2:	e104      	b.n	8000dee <display7SEG+0x3a2>
		case 4:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bea:	487f      	ldr	r0, [pc, #508]	; (8000de8 <display7SEG+0x39c>)
 8000bec:	f001 f961 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf6:	487c      	ldr	r0, [pc, #496]	; (8000de8 <display7SEG+0x39c>)
 8000bf8:	f001 f95b 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c02:	4879      	ldr	r0, [pc, #484]	; (8000de8 <display7SEG+0x39c>)
 8000c04:	f001 f955 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0e:	4876      	ldr	r0, [pc, #472]	; (8000de8 <display7SEG+0x39c>)
 8000c10:	f001 f94f 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	4873      	ldr	r0, [pc, #460]	; (8000de8 <display7SEG+0x39c>)
 8000c1c:	f001 f949 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c26:	4870      	ldr	r0, [pc, #448]	; (8000de8 <display7SEG+0x39c>)
 8000c28:	f001 f943 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c32:	486d      	ldr	r0, [pc, #436]	; (8000de8 <display7SEG+0x39c>)
 8000c34:	f001 f93d 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8000c38:	e0d9      	b.n	8000dee <display7SEG+0x3a2>
		case 5:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c40:	4869      	ldr	r0, [pc, #420]	; (8000de8 <display7SEG+0x39c>)
 8000c42:	f001 f936 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4c:	4866      	ldr	r0, [pc, #408]	; (8000de8 <display7SEG+0x39c>)
 8000c4e:	f001 f930 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c58:	4863      	ldr	r0, [pc, #396]	; (8000de8 <display7SEG+0x39c>)
 8000c5a:	f001 f92a 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c64:	4860      	ldr	r0, [pc, #384]	; (8000de8 <display7SEG+0x39c>)
 8000c66:	f001 f924 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c70:	485d      	ldr	r0, [pc, #372]	; (8000de8 <display7SEG+0x39c>)
 8000c72:	f001 f91e 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7c:	485a      	ldr	r0, [pc, #360]	; (8000de8 <display7SEG+0x39c>)
 8000c7e:	f001 f918 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c88:	4857      	ldr	r0, [pc, #348]	; (8000de8 <display7SEG+0x39c>)
 8000c8a:	f001 f912 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8000c8e:	e0ae      	b.n	8000dee <display7SEG+0x3a2>
		case 6:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c96:	4854      	ldr	r0, [pc, #336]	; (8000de8 <display7SEG+0x39c>)
 8000c98:	f001 f90b 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca2:	4851      	ldr	r0, [pc, #324]	; (8000de8 <display7SEG+0x39c>)
 8000ca4:	f001 f905 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cae:	484e      	ldr	r0, [pc, #312]	; (8000de8 <display7SEG+0x39c>)
 8000cb0:	f001 f8ff 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cba:	484b      	ldr	r0, [pc, #300]	; (8000de8 <display7SEG+0x39c>)
 8000cbc:	f001 f8f9 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc6:	4848      	ldr	r0, [pc, #288]	; (8000de8 <display7SEG+0x39c>)
 8000cc8:	f001 f8f3 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd2:	4845      	ldr	r0, [pc, #276]	; (8000de8 <display7SEG+0x39c>)
 8000cd4:	f001 f8ed 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cde:	4842      	ldr	r0, [pc, #264]	; (8000de8 <display7SEG+0x39c>)
 8000ce0:	f001 f8e7 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8000ce4:	e083      	b.n	8000dee <display7SEG+0x3a2>
		case 7:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cec:	483e      	ldr	r0, [pc, #248]	; (8000de8 <display7SEG+0x39c>)
 8000cee:	f001 f8e0 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf8:	483b      	ldr	r0, [pc, #236]	; (8000de8 <display7SEG+0x39c>)
 8000cfa:	f001 f8da 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d04:	4838      	ldr	r0, [pc, #224]	; (8000de8 <display7SEG+0x39c>)
 8000d06:	f001 f8d4 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d10:	4835      	ldr	r0, [pc, #212]	; (8000de8 <display7SEG+0x39c>)
 8000d12:	f001 f8ce 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1c:	4832      	ldr	r0, [pc, #200]	; (8000de8 <display7SEG+0x39c>)
 8000d1e:	f001 f8c8 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d28:	482f      	ldr	r0, [pc, #188]	; (8000de8 <display7SEG+0x39c>)
 8000d2a:	f001 f8c2 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d34:	482c      	ldr	r0, [pc, #176]	; (8000de8 <display7SEG+0x39c>)
 8000d36:	f001 f8bc 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8000d3a:	e058      	b.n	8000dee <display7SEG+0x3a2>
		case 8:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d42:	4829      	ldr	r0, [pc, #164]	; (8000de8 <display7SEG+0x39c>)
 8000d44:	f001 f8b5 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4e:	4826      	ldr	r0, [pc, #152]	; (8000de8 <display7SEG+0x39c>)
 8000d50:	f001 f8af 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d5a:	4823      	ldr	r0, [pc, #140]	; (8000de8 <display7SEG+0x39c>)
 8000d5c:	f001 f8a9 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d66:	4820      	ldr	r0, [pc, #128]	; (8000de8 <display7SEG+0x39c>)
 8000d68:	f001 f8a3 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d72:	481d      	ldr	r0, [pc, #116]	; (8000de8 <display7SEG+0x39c>)
 8000d74:	f001 f89d 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7e:	481a      	ldr	r0, [pc, #104]	; (8000de8 <display7SEG+0x39c>)
 8000d80:	f001 f897 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8a:	4817      	ldr	r0, [pc, #92]	; (8000de8 <display7SEG+0x39c>)
 8000d8c:	f001 f891 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8000d90:	e02d      	b.n	8000dee <display7SEG+0x3a2>
		case 9:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d98:	4813      	ldr	r0, [pc, #76]	; (8000de8 <display7SEG+0x39c>)
 8000d9a:	f001 f88a 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da4:	4810      	ldr	r0, [pc, #64]	; (8000de8 <display7SEG+0x39c>)
 8000da6:	f001 f884 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <display7SEG+0x39c>)
 8000db2:	f001 f87e 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbc:	480a      	ldr	r0, [pc, #40]	; (8000de8 <display7SEG+0x39c>)
 8000dbe:	f001 f878 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <display7SEG+0x39c>)
 8000dca:	f001 f872 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <display7SEG+0x39c>)
 8000dd6:	f001 f86c 	bl	8001eb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de0:	4801      	ldr	r0, [pc, #4]	; (8000de8 <display7SEG+0x39c>)
 8000de2:	f001 f866 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8000de6:	e002      	b.n	8000dee <display7SEG+0x3a2>
 8000de8:	40010c00 	.word	0x40010c00
		default:
			break;
 8000dec:	bf00      	nop
	}
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop

08000df8 <setRED1>:


void setRED1(){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2102      	movs	r1, #2
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <setRED1+0x28>)
 8000e02:	f001 f856 	bl	8001eb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRN1_GPIO_Port, GRN1_Pin, SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2108      	movs	r1, #8
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <setRED1+0x28>)
 8000e0c:	f001 f851 	bl	8001eb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YLW1_GPIO_Port, YLW1_Pin, SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2104      	movs	r1, #4
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <setRED1+0x28>)
 8000e16:	f001 f84c 	bl	8001eb2 <HAL_GPIO_WritePin>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40010800 	.word	0x40010800

08000e24 <setRED2>:
void setRED2(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4807      	ldr	r0, [pc, #28]	; (8000e4c <setRED2+0x28>)
 8000e2e:	f001 f840 	bl	8001eb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRN2_GPIO_Port, GRN2_Pin, SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2140      	movs	r1, #64	; 0x40
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <setRED2+0x28>)
 8000e38:	f001 f83b 	bl	8001eb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YLW2_GPIO_Port, YLW2_Pin, SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2120      	movs	r1, #32
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <setRED2+0x28>)
 8000e42:	f001 f836 	bl	8001eb2 <HAL_GPIO_WritePin>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40010800 	.word	0x40010800

08000e50 <setGRN1>:
void setGRN1(){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2102      	movs	r1, #2
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <setGRN1+0x28>)
 8000e5a:	f001 f82a 	bl	8001eb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRN1_GPIO_Port, GRN1_Pin, RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2108      	movs	r1, #8
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <setGRN1+0x28>)
 8000e64:	f001 f825 	bl	8001eb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YLW1_GPIO_Port, YLW1_Pin, SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <setGRN1+0x28>)
 8000e6e:	f001 f820 	bl	8001eb2 <HAL_GPIO_WritePin>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40010800 	.word	0x40010800

08000e7c <setGRN2>:
void setGRN2(){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2110      	movs	r1, #16
 8000e84:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <setGRN2+0x28>)
 8000e86:	f001 f814 	bl	8001eb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRN2_GPIO_Port, GRN2_Pin, RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2140      	movs	r1, #64	; 0x40
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <setGRN2+0x28>)
 8000e90:	f001 f80f 	bl	8001eb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YLW2_GPIO_Port, YLW2_Pin, SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2120      	movs	r1, #32
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <setGRN2+0x28>)
 8000e9a:	f001 f80a 	bl	8001eb2 <HAL_GPIO_WritePin>
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40010800 	.word	0x40010800

08000ea8 <setYLW1>:
void setYLW1(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <setYLW1+0x28>)
 8000eb2:	f000 fffe 	bl	8001eb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRN1_GPIO_Port, GRN1_Pin, SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <setYLW1+0x28>)
 8000ebc:	f000 fff9 	bl	8001eb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YLW1_GPIO_Port, YLW1_Pin, RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <setYLW1+0x28>)
 8000ec6:	f000 fff4 	bl	8001eb2 <HAL_GPIO_WritePin>
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40010800 	.word	0x40010800

08000ed4 <setYLW2>:
void setYLW2(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2110      	movs	r1, #16
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <setYLW2+0x28>)
 8000ede:	f000 ffe8 	bl	8001eb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRN2_GPIO_Port, GRN2_Pin, SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2140      	movs	r1, #64	; 0x40
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <setYLW2+0x28>)
 8000ee8:	f000 ffe3 	bl	8001eb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YLW2_GPIO_Port, YLW2_Pin, RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2120      	movs	r1, #32
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <setYLW2+0x28>)
 8000ef2:	f000 ffde 	bl	8001eb2 <HAL_GPIO_WritePin>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40010800 	.word	0x40010800

08000f00 <set_led>:

void set_led(int status){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	switch(status){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b0e      	cmp	r3, #14
 8000f0c:	d013      	beq.n	8000f36 <set_led+0x36>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0e      	cmp	r3, #14
 8000f12:	dc15      	bgt.n	8000f40 <set_led+0x40>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b0c      	cmp	r3, #12
 8000f18:	d003      	beq.n	8000f22 <set_led+0x22>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0d      	cmp	r3, #13
 8000f1e:	d005      	beq.n	8000f2c <set_led+0x2c>
	case MAN_YLW:
		setYLW1();
		setYLW2();
		break;
	default:
		break;
 8000f20:	e00e      	b.n	8000f40 <set_led+0x40>
		setRED1();
 8000f22:	f7ff ff69 	bl	8000df8 <setRED1>
		setRED2();
 8000f26:	f7ff ff7d 	bl	8000e24 <setRED2>
		break;
 8000f2a:	e00a      	b.n	8000f42 <set_led+0x42>
		setGRN1();
 8000f2c:	f7ff ff90 	bl	8000e50 <setGRN1>
		setGRN2();
 8000f30:	f7ff ffa4 	bl	8000e7c <setGRN2>
		break;
 8000f34:	e005      	b.n	8000f42 <set_led+0x42>
		setYLW1();
 8000f36:	f7ff ffb7 	bl	8000ea8 <setYLW1>
		setYLW2();
 8000f3a:	f7ff ffcb 	bl	8000ed4 <setYLW2>
		break;
 8000f3e:	e000      	b.n	8000f42 <set_led+0x42>
		break;
 8000f40:	bf00      	nop
	}
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <update7SEG>:
	}
}
const int MAX_LED = 4;

int led_buffer[4] = {0, 0, 0, 0};
void update7SEG(int *led_index){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	switch (*led_index){
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d873      	bhi.n	8001044 <update7SEG+0xf8>
 8000f5c:	a201      	add	r2, pc, #4	; (adr r2, 8000f64 <update7SEG+0x18>)
 8000f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f62:	bf00      	nop
 8000f64:	08000f75 	.word	0x08000f75
 8000f68:	08000fa9 	.word	0x08000fa9
 8000f6c:	08000fdd 	.word	0x08000fdd
 8000f70:	08001011 	.word	0x08001011
		case 0:
			display7SEG(led_buffer[0]);
 8000f74:	4b3c      	ldr	r3, [pc, #240]	; (8001068 <update7SEG+0x11c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fd67 	bl	8000a4c <display7SEG>
  		  	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2101      	movs	r1, #1
 8000f82:	483a      	ldr	r0, [pc, #232]	; (800106c <update7SEG+0x120>)
 8000f84:	f000 ff95 	bl	8001eb2 <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4837      	ldr	r0, [pc, #220]	; (800106c <update7SEG+0x120>)
 8000f8e:	f000 ff90 	bl	8001eb2 <HAL_GPIO_WritePin>
 		  	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2104      	movs	r1, #4
 8000f96:	4835      	ldr	r0, [pc, #212]	; (800106c <update7SEG+0x120>)
 8000f98:	f000 ff8b 	bl	8001eb2 <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4832      	ldr	r0, [pc, #200]	; (800106c <update7SEG+0x120>)
 8000fa2:	f000 ff86 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8000fa6:	e04e      	b.n	8001046 <update7SEG+0xfa>
		case 1:
			display7SEG(led_buffer[1]);
 8000fa8:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <update7SEG+0x11c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fd4d 	bl	8000a4c <display7SEG>
  		  	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	482d      	ldr	r0, [pc, #180]	; (800106c <update7SEG+0x120>)
 8000fb8:	f000 ff7b 	bl	8001eb2 <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	482a      	ldr	r0, [pc, #168]	; (800106c <update7SEG+0x120>)
 8000fc2:	f000 ff76 	bl	8001eb2 <HAL_GPIO_WritePin>
 		  	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2104      	movs	r1, #4
 8000fca:	4828      	ldr	r0, [pc, #160]	; (800106c <update7SEG+0x120>)
 8000fcc:	f000 ff71 	bl	8001eb2 <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	4825      	ldr	r0, [pc, #148]	; (800106c <update7SEG+0x120>)
 8000fd6:	f000 ff6c 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8000fda:	e034      	b.n	8001046 <update7SEG+0xfa>
		case 2:
			display7SEG(led_buffer[2]);
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <update7SEG+0x11c>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fd33 	bl	8000a4c <display7SEG>
  		  	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4820      	ldr	r0, [pc, #128]	; (800106c <update7SEG+0x120>)
 8000fec:	f000 ff61 	bl	8001eb2 <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	481d      	ldr	r0, [pc, #116]	; (800106c <update7SEG+0x120>)
 8000ff6:	f000 ff5c 	bl	8001eb2 <HAL_GPIO_WritePin>
 		  	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	481b      	ldr	r0, [pc, #108]	; (800106c <update7SEG+0x120>)
 8001000:	f000 ff57 	bl	8001eb2 <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2108      	movs	r1, #8
 8001008:	4818      	ldr	r0, [pc, #96]	; (800106c <update7SEG+0x120>)
 800100a:	f000 ff52 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 800100e:	e01a      	b.n	8001046 <update7SEG+0xfa>
		case 3:
			display7SEG(led_buffer[3]);
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <update7SEG+0x11c>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fd19 	bl	8000a4c <display7SEG>
  		  	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2101      	movs	r1, #1
 800101e:	4813      	ldr	r0, [pc, #76]	; (800106c <update7SEG+0x120>)
 8001020:	f000 ff47 	bl	8001eb2 <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2102      	movs	r1, #2
 8001028:	4810      	ldr	r0, [pc, #64]	; (800106c <update7SEG+0x120>)
 800102a:	f000 ff42 	bl	8001eb2 <HAL_GPIO_WritePin>
 		  	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800102e:	2201      	movs	r2, #1
 8001030:	2104      	movs	r1, #4
 8001032:	480e      	ldr	r0, [pc, #56]	; (800106c <update7SEG+0x120>)
 8001034:	f000 ff3d 	bl	8001eb2 <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2108      	movs	r1, #8
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <update7SEG+0x120>)
 800103e:	f000 ff38 	bl	8001eb2 <HAL_GPIO_WritePin>
			break;
 8001042:	e000      	b.n	8001046 <update7SEG+0xfa>
		default:
			break;
 8001044:	bf00      	nop
	}
	if (*led_index >= 3) *led_index = 0;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b02      	cmp	r3, #2
 800104c:	dd03      	ble.n	8001056 <update7SEG+0x10a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
	else *led_index = *led_index + 1;
}
 8001054:	e004      	b.n	8001060 <update7SEG+0x114>
	else *led_index = *led_index + 1;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	601a      	str	r2, [r3, #0]
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000094 	.word	0x20000094
 800106c:	40010c00 	.word	0x40010c00

08001070 <updateBufferMode1>:

void updateBufferMode1(int status){
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b02      	subs	r3, #2
 800107c:	2b03      	cmp	r3, #3
 800107e:	f200 8095 	bhi.w	80011ac <updateBufferMode1+0x13c>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <updateBufferMode1+0x18>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	08001099 	.word	0x08001099
 800108c:	080010d1 	.word	0x080010d1
 8001090:	08001113 	.word	0x08001113
 8001094:	0800114b 	.word	0x0800114b
	switch(status){
	case RED1_GRN2:
		led_buffer[0] = RED - counter0;
 8001098:	4b48      	ldr	r3, [pc, #288]	; (80011bc <updateBufferMode1+0x14c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <updateBufferMode1+0x150>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <updateBufferMode1+0x154>)
 80010a4:	6013      	str	r3, [r2, #0]
		led_buffer[2] = led_buffer[0];
 80010a6:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <updateBufferMode1+0x154>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a46      	ldr	r2, [pc, #280]	; (80011c4 <updateBufferMode1+0x154>)
 80010ac:	6093      	str	r3, [r2, #8]
		led_buffer[1] = GREEN - counter0;
 80010ae:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <updateBufferMode1+0x158>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b43      	ldr	r3, [pc, #268]	; (80011c0 <updateBufferMode1+0x150>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	4a42      	ldr	r2, [pc, #264]	; (80011c4 <updateBufferMode1+0x154>)
 80010ba:	6053      	str	r3, [r2, #4]
		led_buffer[3] = led_buffer[1];
 80010bc:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <updateBufferMode1+0x154>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4a40      	ldr	r2, [pc, #256]	; (80011c4 <updateBufferMode1+0x154>)
 80010c2:	60d3      	str	r3, [r2, #12]
		counter0++;
 80010c4:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <updateBufferMode1+0x150>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a3d      	ldr	r2, [pc, #244]	; (80011c0 <updateBufferMode1+0x150>)
 80010cc:	6013      	str	r3, [r2, #0]
		break;
 80010ce:	e070      	b.n	80011b2 <updateBufferMode1+0x142>

	case RED1_YLW2:
		led_buffer[0] = RED - counter0;
 80010d0:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <updateBufferMode1+0x14c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <updateBufferMode1+0x150>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	4a3a      	ldr	r2, [pc, #232]	; (80011c4 <updateBufferMode1+0x154>)
 80010dc:	6013      	str	r3, [r2, #0]
		led_buffer[2] = led_buffer[0];
 80010de:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <updateBufferMode1+0x154>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <updateBufferMode1+0x154>)
 80010e4:	6093      	str	r3, [r2, #8]
		led_buffer[1] = YLW - counter1;
 80010e6:	4b39      	ldr	r3, [pc, #228]	; (80011cc <updateBufferMode1+0x15c>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b39      	ldr	r3, [pc, #228]	; (80011d0 <updateBufferMode1+0x160>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	4a34      	ldr	r2, [pc, #208]	; (80011c4 <updateBufferMode1+0x154>)
 80010f2:	6053      	str	r3, [r2, #4]
		led_buffer[3] = led_buffer[1];
 80010f4:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <updateBufferMode1+0x154>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <updateBufferMode1+0x154>)
 80010fa:	60d3      	str	r3, [r2, #12]
		counter0++;
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <updateBufferMode1+0x150>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <updateBufferMode1+0x150>)
 8001104:	6013      	str	r3, [r2, #0]
		counter1++;
 8001106:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <updateBufferMode1+0x160>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	4a30      	ldr	r2, [pc, #192]	; (80011d0 <updateBufferMode1+0x160>)
 800110e:	6013      	str	r3, [r2, #0]

		break;
 8001110:	e04f      	b.n	80011b2 <updateBufferMode1+0x142>

	case GRN1_RED2:
		led_buffer[0] = GREEN - counter2;  // 5
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <updateBufferMode1+0x158>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <updateBufferMode1+0x164>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	4a29      	ldr	r2, [pc, #164]	; (80011c4 <updateBufferMode1+0x154>)
 800111e:	6013      	str	r3, [r2, #0]
		led_buffer[2] = led_buffer[0];
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <updateBufferMode1+0x154>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <updateBufferMode1+0x154>)
 8001126:	6093      	str	r3, [r2, #8]
		led_buffer[1] = RED - counter2; // 3
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <updateBufferMode1+0x14c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <updateBufferMode1+0x164>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <updateBufferMode1+0x154>)
 8001134:	6053      	str	r3, [r2, #4]
		led_buffer[3] = led_buffer[1];
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <updateBufferMode1+0x154>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a22      	ldr	r2, [pc, #136]	; (80011c4 <updateBufferMode1+0x154>)
 800113c:	60d3      	str	r3, [r2, #12]
		counter2++;
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <updateBufferMode1+0x164>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <updateBufferMode1+0x164>)
 8001146:	6013      	str	r3, [r2, #0]
		break;
 8001148:	e033      	b.n	80011b2 <updateBufferMode1+0x142>
	case YLW1_RED2:
		led_buffer[1] = RED - counter2; // 3
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <updateBufferMode1+0x14c>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <updateBufferMode1+0x164>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <updateBufferMode1+0x154>)
 8001156:	6053      	str	r3, [r2, #4]
		led_buffer[3] = led_buffer[1];
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <updateBufferMode1+0x154>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <updateBufferMode1+0x154>)
 800115e:	60d3      	str	r3, [r2, #12]
		led_buffer[0] = YLW - counter3;  // 5
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <updateBufferMode1+0x15c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <updateBufferMode1+0x168>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <updateBufferMode1+0x154>)
 800116c:	6013      	str	r3, [r2, #0]
		led_buffer[2] = led_buffer[0];
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <updateBufferMode1+0x154>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <updateBufferMode1+0x154>)
 8001174:	6093      	str	r3, [r2, #8]
		counter2++;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <updateBufferMode1+0x164>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <updateBufferMode1+0x164>)
 800117e:	6013      	str	r3, [r2, #0]
		counter3++;
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <updateBufferMode1+0x168>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <updateBufferMode1+0x168>)
 8001188:	6013      	str	r3, [r2, #0]
		if (led_buffer[0] <= 1) {
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <updateBufferMode1+0x154>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b01      	cmp	r3, #1
 8001190:	dc0e      	bgt.n	80011b0 <updateBufferMode1+0x140>
			counter0 = 0;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <updateBufferMode1+0x150>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
			counter1 = 0;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <updateBufferMode1+0x160>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
			counter2 = 0;
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <updateBufferMode1+0x164>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
			counter3 = 0;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <updateBufferMode1+0x168>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
		}
		break;
 80011aa:	e001      	b.n	80011b0 <updateBufferMode1+0x140>
	default:
		break;
 80011ac:	bf00      	nop
 80011ae:	e000      	b.n	80011b2 <updateBufferMode1+0x142>
		break;
 80011b0:	bf00      	nop
	}
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	20000040 	.word	0x20000040
 80011c0:	20000080 	.word	0x20000080
 80011c4:	20000094 	.word	0x20000094
 80011c8:	2000003c 	.word	0x2000003c
 80011cc:	20000044 	.word	0x20000044
 80011d0:	20000084 	.word	0x20000084
 80011d4:	20000088 	.word	0x20000088
 80011d8:	2000008c 	.word	0x2000008c

080011dc <updateBufferMode2>:

void updateBufferMode2(){
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	led_buffer[0] = 2;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <updateBufferMode2+0x4c>)
 80011e2:	2202      	movs	r2, #2
 80011e4:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 2;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <updateBufferMode2+0x4c>)
 80011e8:	2202      	movs	r2, #2
 80011ea:	605a      	str	r2, [r3, #4]
	led_buffer[2] = RED/10;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <updateBufferMode2+0x50>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <updateBufferMode2+0x54>)
 80011f2:	fb82 1203 	smull	r1, r2, r2, r3
 80011f6:	1092      	asrs	r2, r2, #2
 80011f8:	17db      	asrs	r3, r3, #31
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <updateBufferMode2+0x4c>)
 80011fe:	6093      	str	r3, [r2, #8]
	led_buffer[3] = RED % 10;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <updateBufferMode2+0x50>)
 8001202:	6819      	ldr	r1, [r3, #0]
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <updateBufferMode2+0x54>)
 8001206:	fb83 2301 	smull	r2, r3, r3, r1
 800120a:	109a      	asrs	r2, r3, #2
 800120c:	17cb      	asrs	r3, r1, #31
 800120e:	1ad2      	subs	r2, r2, r3
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	1aca      	subs	r2, r1, r3
 800121a:	4b03      	ldr	r3, [pc, #12]	; (8001228 <updateBufferMode2+0x4c>)
 800121c:	60da      	str	r2, [r3, #12]
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000094 	.word	0x20000094
 800122c:	20000040 	.word	0x20000040
 8001230:	66666667 	.word	0x66666667

08001234 <updateBufferMode3>:

void updateBufferMode3(){
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	led_buffer[0] = 3;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <updateBufferMode3+0x4c>)
 800123a:	2203      	movs	r2, #3
 800123c:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 3;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <updateBufferMode3+0x4c>)
 8001240:	2203      	movs	r2, #3
 8001242:	605a      	str	r2, [r3, #4]
	led_buffer[2] = YLW/10;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <updateBufferMode3+0x50>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <updateBufferMode3+0x54>)
 800124a:	fb82 1203 	smull	r1, r2, r2, r3
 800124e:	1092      	asrs	r2, r2, #2
 8001250:	17db      	asrs	r3, r3, #31
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <updateBufferMode3+0x4c>)
 8001256:	6093      	str	r3, [r2, #8]
	led_buffer[3] = YLW % 10;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <updateBufferMode3+0x50>)
 800125a:	6819      	ldr	r1, [r3, #0]
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <updateBufferMode3+0x54>)
 800125e:	fb83 2301 	smull	r2, r3, r3, r1
 8001262:	109a      	asrs	r2, r3, #2
 8001264:	17cb      	asrs	r3, r1, #31
 8001266:	1ad2      	subs	r2, r2, r3
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	1aca      	subs	r2, r1, r3
 8001272:	4b03      	ldr	r3, [pc, #12]	; (8001280 <updateBufferMode3+0x4c>)
 8001274:	60da      	str	r2, [r3, #12]
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000094 	.word	0x20000094
 8001284:	20000044 	.word	0x20000044
 8001288:	66666667 	.word	0x66666667

0800128c <updateBufferMode4>:

void updateBufferMode4(){
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	led_buffer[0] = 4;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <updateBufferMode4+0x4c>)
 8001292:	2204      	movs	r2, #4
 8001294:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 4;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <updateBufferMode4+0x4c>)
 8001298:	2204      	movs	r2, #4
 800129a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = GREEN/10;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <updateBufferMode4+0x50>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <updateBufferMode4+0x54>)
 80012a2:	fb82 1203 	smull	r1, r2, r2, r3
 80012a6:	1092      	asrs	r2, r2, #2
 80012a8:	17db      	asrs	r3, r3, #31
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <updateBufferMode4+0x4c>)
 80012ae:	6093      	str	r3, [r2, #8]
	led_buffer[3] = GREEN % 10;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <updateBufferMode4+0x50>)
 80012b2:	6819      	ldr	r1, [r3, #0]
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <updateBufferMode4+0x54>)
 80012b6:	fb83 2301 	smull	r2, r3, r3, r1
 80012ba:	109a      	asrs	r2, r3, #2
 80012bc:	17cb      	asrs	r3, r1, #31
 80012be:	1ad2      	subs	r2, r2, r3
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	1aca      	subs	r2, r1, r3
 80012ca:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <updateBufferMode4+0x4c>)
 80012cc:	60da      	str	r2, [r3, #12]
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000094 	.word	0x20000094
 80012dc:	2000003c 	.word	0x2000003c
 80012e0:	66666667 	.word	0x66666667

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e8:	f000 fae2 	bl	80018b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ec:	f000 f814 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f0:	f000 f89a 	bl	8001428 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012f4:	f000 f84c 	bl	8001390 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <main+0x2c>)
 80012fa:	f001 fa1f 	bl	800273c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status = INIT;
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <main+0x30>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_manual_run();
 8001304:	f7ff f9b8 	bl	8000678 <fsm_manual_run>
	  fsm_automatic_run();
 8001308:	f7ff f874 	bl	80003f4 <fsm_automatic_run>
	  fsm_manual_run();
 800130c:	e7fa      	b.n	8001304 <main+0x20>
 800130e:	bf00      	nop
 8001310:	200000d4 	.word	0x200000d4
 8001314:	20000090 	.word	0x20000090

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b090      	sub	sp, #64	; 0x40
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0318 	add.w	r3, r7, #24
 8001322:	2228      	movs	r2, #40	; 0x28
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fdc4 	bl	8002eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800133a:	2302      	movs	r3, #2
 800133c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133e:	2301      	movs	r3, #1
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001342:	2310      	movs	r3, #16
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001346:	2300      	movs	r3, #0
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fdc8 	bl	8001ee4 <HAL_RCC_OscConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800135a:	f000 f8e1 	bl	8001520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135e:	230f      	movs	r3, #15
 8001360:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f001 f834 	bl	80023e4 <HAL_RCC_ClockConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001382:	f000 f8cd 	bl	8001520 <Error_Handler>
  }
}
 8001386:	bf00      	nop
 8001388:	3740      	adds	r7, #64	; 0x40
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_TIM2_Init+0x94>)
 80013ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_TIM2_Init+0x94>)
 80013b6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80013ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_TIM2_Init+0x94>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_TIM2_Init+0x94>)
 80013c4:	2209      	movs	r2, #9
 80013c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_TIM2_Init+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_TIM2_Init+0x94>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d4:	4813      	ldr	r0, [pc, #76]	; (8001424 <MX_TIM2_Init+0x94>)
 80013d6:	f001 f961 	bl	800269c <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013e0:	f000 f89e 	bl	8001520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_TIM2_Init+0x94>)
 80013f2:	f001 faf7 	bl	80029e4 <HAL_TIM_ConfigClockSource>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013fc:	f000 f890 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_TIM2_Init+0x94>)
 800140e:	f001 fcc3 	bl	8002d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001418:	f000 f882 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200000d4 	.word	0x200000d4

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <MX_GPIO_Init+0xd0>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a2d      	ldr	r2, [pc, #180]	; (80014f8 <MX_GPIO_Init+0xd0>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <MX_GPIO_Init+0xd0>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <MX_GPIO_Init+0xd0>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <MX_GPIO_Init+0xd0>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <MX_GPIO_Init+0xd0>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <MX_GPIO_Init+0xd0>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <MX_GPIO_Init+0xd0>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_GPIO_Init+0xd0>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YLW1_Pin|GRN1_Pin|RED2_Pin
 8001484:	2200      	movs	r2, #0
 8001486:	217e      	movs	r1, #126	; 0x7e
 8001488:	481c      	ldr	r0, [pc, #112]	; (80014fc <MX_GPIO_Init+0xd4>)
 800148a:	f000 fd12 	bl	8001eb2 <HAL_GPIO_WritePin>
                          |YLW2_Pin|GRN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|SEG_B_Pin
 800148e:	2200      	movs	r2, #0
 8001490:	f64f 610f 	movw	r1, #65039	; 0xfe0f
 8001494:	481a      	ldr	r0, [pc, #104]	; (8001500 <MX_GPIO_Init+0xd8>)
 8001496:	f000 fd0c 	bl	8001eb2 <HAL_GPIO_WritePin>
                          |SEG_C_Pin|SEG_D_Pin|SEG_E_Pin|SEG_F_Pin
                          |SEG_G_Pin|EN3_Pin|SEG_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 800149a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800149e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	4815      	ldr	r0, [pc, #84]	; (8001504 <MX_GPIO_Init+0xdc>)
 80014b0:	f000 fb6e 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin YLW1_Pin GRN1_Pin RED2_Pin
                           YLW2_Pin GRN2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YLW1_Pin|GRN1_Pin|RED2_Pin
 80014b4:	237e      	movs	r3, #126	; 0x7e
 80014b6:	613b      	str	r3, [r7, #16]
                          |YLW2_Pin|GRN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	4619      	mov	r1, r3
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <MX_GPIO_Init+0xd4>)
 80014cc:	f000 fb60 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin SEG_B_Pin
                           SEG_C_Pin SEG_D_Pin SEG_E_Pin SEG_F_Pin
                           SEG_G_Pin EN3_Pin SEG_A_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|SEG_B_Pin
 80014d0:	f64f 630f 	movw	r3, #65039	; 0xfe0f
 80014d4:	613b      	str	r3, [r7, #16]
                          |SEG_C_Pin|SEG_D_Pin|SEG_E_Pin|SEG_F_Pin
                          |SEG_G_Pin|EN3_Pin|SEG_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2302      	movs	r3, #2
 80014e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_GPIO_Init+0xd8>)
 80014ea:	f000 fb51 	bl	8001b90 <HAL_GPIO_Init>

}
 80014ee:	bf00      	nop
 80014f0:	3720      	adds	r7, #32
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010800 	.word	0x40010800
 8001500:	40010c00 	.word	0x40010c00
 8001504:	40011000 	.word	0x40011000

08001508 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001510:	f000 f87c 	bl	800160c <timerRun>
	getKeyInputFor3Button();
 8001514:	f7fe ff64 	bl	80003e0 <getKeyInputFor3Button>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>
	...

0800152c <setTimer0>:
int timer4_flag = 0;

int timer5_counter = 0;
int timer5_flag = 0;

void setTimer0(int duration){
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TICK;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <setTimer0+0x2c>)
 8001538:	fb82 1203 	smull	r1, r2, r2, r3
 800153c:	1092      	asrs	r2, r2, #2
 800153e:	17db      	asrs	r3, r3, #31
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	4a06      	ldr	r2, [pc, #24]	; (800155c <setTimer0+0x30>)
 8001544:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <setTimer0+0x34>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	66666667 	.word	0x66666667
 800155c:	200000a4 	.word	0x200000a4
 8001560:	200000a8 	.word	0x200000a8

08001564 <setTimer1>:
void setTimer1(int duration){
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <setTimer1+0x2c>)
 8001570:	fb82 1203 	smull	r1, r2, r2, r3
 8001574:	1092      	asrs	r2, r2, #2
 8001576:	17db      	asrs	r3, r3, #31
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	4a06      	ldr	r2, [pc, #24]	; (8001594 <setTimer1+0x30>)
 800157c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <setTimer1+0x34>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	66666667 	.word	0x66666667
 8001594:	200000ac 	.word	0x200000ac
 8001598:	200000b0 	.word	0x200000b0

0800159c <setTimer2>:
void setTimer2(int duration){
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <setTimer2+0x2c>)
 80015a8:	fb82 1203 	smull	r1, r2, r2, r3
 80015ac:	1092      	asrs	r2, r2, #2
 80015ae:	17db      	asrs	r3, r3, #31
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	4a06      	ldr	r2, [pc, #24]	; (80015cc <setTimer2+0x30>)
 80015b4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <setTimer2+0x34>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	66666667 	.word	0x66666667
 80015cc:	200000b4 	.word	0x200000b4
 80015d0:	200000b8 	.word	0x200000b8

080015d4 <setTimer3>:
void setTimer3(int duration){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <setTimer3+0x2c>)
 80015e0:	fb82 1203 	smull	r1, r2, r2, r3
 80015e4:	1092      	asrs	r2, r2, #2
 80015e6:	17db      	asrs	r3, r3, #31
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	4a06      	ldr	r2, [pc, #24]	; (8001604 <setTimer3+0x30>)
 80015ec:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <setTimer3+0x34>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	66666667 	.word	0x66666667
 8001604:	200000bc 	.word	0x200000bc
 8001608:	200000c0 	.word	0x200000c0

0800160c <timerRun>:
}
void setTimer5(int duration){
	timer5_counter = duration/TICK;
	timer5_flag = 0;
}
void timerRun(){
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	//Timer0
	if (timer0_counter > 0){
 8001610:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <timerRun+0xcc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dd0b      	ble.n	8001630 <timerRun+0x24>
		timer0_counter--;
 8001618:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <timerRun+0xcc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	4a2e      	ldr	r2, [pc, #184]	; (80016d8 <timerRun+0xcc>)
 8001620:	6013      	str	r3, [r2, #0]
		if (timer0_counter <= 0) {
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <timerRun+0xcc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	dc02      	bgt.n	8001630 <timerRun+0x24>
			timer0_flag = 1;
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <timerRun+0xd0>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
		}
	}
	//Timer1
	if (timer1_counter > 0){
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <timerRun+0xd4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	dd0b      	ble.n	8001650 <timerRun+0x44>
		timer1_counter--;
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <timerRun+0xd4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3b01      	subs	r3, #1
 800163e:	4a28      	ldr	r2, [pc, #160]	; (80016e0 <timerRun+0xd4>)
 8001640:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <timerRun+0xd4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	dc02      	bgt.n	8001650 <timerRun+0x44>
			timer1_flag = 1;
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <timerRun+0xd8>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]
		}
	}
	//Timer2
	if (timer2_counter > 0){
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <timerRun+0xdc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	dd0b      	ble.n	8001670 <timerRun+0x64>
		timer2_counter--;
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <timerRun+0xdc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	4a22      	ldr	r2, [pc, #136]	; (80016e8 <timerRun+0xdc>)
 8001660:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <timerRun+0xdc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	dc02      	bgt.n	8001670 <timerRun+0x64>
			timer2_flag = 1;
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <timerRun+0xe0>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
		}
	}
	//Timer3
	if (timer3_counter > 0){
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <timerRun+0xe4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	dd0b      	ble.n	8001690 <timerRun+0x84>
		timer3_counter--;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <timerRun+0xe4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3b01      	subs	r3, #1
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <timerRun+0xe4>)
 8001680:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <timerRun+0xe4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	dc02      	bgt.n	8001690 <timerRun+0x84>
			timer3_flag = 1;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <timerRun+0xe8>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
		}
	}
	//Timer4
	if (timer4_counter > 0){
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <timerRun+0xec>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	dd0b      	ble.n	80016b0 <timerRun+0xa4>
		timer4_counter--;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <timerRun+0xec>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3b01      	subs	r3, #1
 800169e:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <timerRun+0xec>)
 80016a0:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <timerRun+0xec>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dc02      	bgt.n	80016b0 <timerRun+0xa4>
			timer4_flag = 1;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <timerRun+0xf0>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
		}
	}
	//Timer5
	if (timer5_counter > 0){
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <timerRun+0xf4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	dd0b      	ble.n	80016d0 <timerRun+0xc4>
		timer5_counter--;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <timerRun+0xf4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3b01      	subs	r3, #1
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <timerRun+0xf4>)
 80016c0:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <timerRun+0xf4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	dc02      	bgt.n	80016d0 <timerRun+0xc4>
			timer5_flag = 1;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <timerRun+0xf8>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
		}
	}
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	200000a4 	.word	0x200000a4
 80016dc:	200000a8 	.word	0x200000a8
 80016e0:	200000ac 	.word	0x200000ac
 80016e4:	200000b0 	.word	0x200000b0
 80016e8:	200000b4 	.word	0x200000b4
 80016ec:	200000b8 	.word	0x200000b8
 80016f0:	200000bc 	.word	0x200000bc
 80016f4:	200000c0 	.word	0x200000c0
 80016f8:	200000c4 	.word	0x200000c4
 80016fc:	200000c8 	.word	0x200000c8
 8001700:	200000cc 	.word	0x200000cc
 8001704:	200000d0 	.word	0x200000d0

08001708 <clearTimer0>:

void clearTimer0(){
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
	timer0_flag = 0;
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <clearTimer0+0x18>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
	timer0_counter = 0;
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <clearTimer0+0x1c>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	200000a8 	.word	0x200000a8
 8001724:	200000a4 	.word	0x200000a4

08001728 <clearTimer1>:
void clearTimer1(){
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	timer1_flag = 0;
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <clearTimer1+0x18>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
	timer1_counter = 0;
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <clearTimer1+0x1c>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	200000b0 	.word	0x200000b0
 8001744:	200000ac 	.word	0x200000ac

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_MspInit+0x5c>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <HAL_MspInit+0x5c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6193      	str	r3, [r2, #24]
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_MspInit+0x5c>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_MspInit+0x5c>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_MspInit+0x5c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_MspInit+0x5c>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_MspInit+0x60>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_MspInit+0x60>)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010000 	.word	0x40010000

080017ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017bc:	d113      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_TIM_Base_MspInit+0x44>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_TIM_Base_MspInit+0x44>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_TIM_Base_MspInit+0x44>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	201c      	movs	r0, #28
 80017dc:	f000 f9a1 	bl	8001b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017e0:	201c      	movs	r0, #28
 80017e2:	f000 f9ba 	bl	8001b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183a:	f000 f87f 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <TIM2_IRQHandler+0x10>)
 800184a:	f000 ffc3 	bl	80027d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200000d4 	.word	0x200000d4

08001858 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001864:	f7ff fff8 	bl	8001858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480b      	ldr	r0, [pc, #44]	; (8001898 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800186a:	490c      	ldr	r1, [pc, #48]	; (800189c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800186c:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001880:	4c09      	ldr	r4, [pc, #36]	; (80018a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188e:	f001 faed 	bl	8002e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001892:	f7ff fd27 	bl	80012e4 <main>
  bx lr
 8001896:	4770      	bx	lr
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800189c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80018a0:	08002f08 	.word	0x08002f08
  ldr r2, =_sbss
 80018a4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80018a8:	20000120 	.word	0x20000120

080018ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC1_2_IRQHandler>
	...

080018b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_Init+0x28>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_Init+0x28>)
 80018ba:	f043 0310 	orr.w	r3, r3, #16
 80018be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 f923 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	200f      	movs	r0, #15
 80018c8:	f000 f808 	bl	80018dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff ff3c 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40022000 	.word	0x40022000

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x54>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x58>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f93b 	bl	8001b76 <HAL_SYSTICK_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e00e      	b.n	8001928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d80a      	bhi.n	8001926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f000 f903 	bl	8001b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800191c:	4a06      	ldr	r2, [pc, #24]	; (8001938 <HAL_InitTick+0x5c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000048 	.word	0x20000048
 8001934:	20000050 	.word	0x20000050
 8001938:	2000004c 	.word	0x2000004c

0800193c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_IncTick+0x1c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_IncTick+0x20>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_IncTick+0x20>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000050 	.word	0x20000050
 800195c:	2000011c 	.word	0x2000011c

08001960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <HAL_GetTick+0x10>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	2000011c 	.word	0x2000011c

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db0b      	blt.n	8001a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	4906      	ldr	r1, [pc, #24]	; (8001a0c <__NVIC_EnableIRQ+0x34>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad8:	d301      	bcc.n	8001ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00f      	b.n	8001afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <SysTick_Config+0x40>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f7ff ff90 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <SysTick_Config+0x40>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <SysTick_Config+0x40>)
 8001af8:	2207      	movs	r2, #7
 8001afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	e000e010 	.word	0xe000e010

08001b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff2d 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff42 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff90 	bl	8001a64 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff5f 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff35 	bl	80019d8 <__NVIC_EnableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffa2 	bl	8001ac8 <SysTick_Config>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b08b      	sub	sp, #44	; 0x2c
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba2:	e148      	b.n	8001e36 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	f040 8137 	bne.w	8001e30 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4aa3      	ldr	r2, [pc, #652]	; (8001e54 <HAL_GPIO_Init+0x2c4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d05e      	beq.n	8001c8a <HAL_GPIO_Init+0xfa>
 8001bcc:	4aa1      	ldr	r2, [pc, #644]	; (8001e54 <HAL_GPIO_Init+0x2c4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d875      	bhi.n	8001cbe <HAL_GPIO_Init+0x12e>
 8001bd2:	4aa1      	ldr	r2, [pc, #644]	; (8001e58 <HAL_GPIO_Init+0x2c8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d058      	beq.n	8001c8a <HAL_GPIO_Init+0xfa>
 8001bd8:	4a9f      	ldr	r2, [pc, #636]	; (8001e58 <HAL_GPIO_Init+0x2c8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d86f      	bhi.n	8001cbe <HAL_GPIO_Init+0x12e>
 8001bde:	4a9f      	ldr	r2, [pc, #636]	; (8001e5c <HAL_GPIO_Init+0x2cc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d052      	beq.n	8001c8a <HAL_GPIO_Init+0xfa>
 8001be4:	4a9d      	ldr	r2, [pc, #628]	; (8001e5c <HAL_GPIO_Init+0x2cc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d869      	bhi.n	8001cbe <HAL_GPIO_Init+0x12e>
 8001bea:	4a9d      	ldr	r2, [pc, #628]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d04c      	beq.n	8001c8a <HAL_GPIO_Init+0xfa>
 8001bf0:	4a9b      	ldr	r2, [pc, #620]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d863      	bhi.n	8001cbe <HAL_GPIO_Init+0x12e>
 8001bf6:	4a9b      	ldr	r2, [pc, #620]	; (8001e64 <HAL_GPIO_Init+0x2d4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d046      	beq.n	8001c8a <HAL_GPIO_Init+0xfa>
 8001bfc:	4a99      	ldr	r2, [pc, #612]	; (8001e64 <HAL_GPIO_Init+0x2d4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d85d      	bhi.n	8001cbe <HAL_GPIO_Init+0x12e>
 8001c02:	2b12      	cmp	r3, #18
 8001c04:	d82a      	bhi.n	8001c5c <HAL_GPIO_Init+0xcc>
 8001c06:	2b12      	cmp	r3, #18
 8001c08:	d859      	bhi.n	8001cbe <HAL_GPIO_Init+0x12e>
 8001c0a:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <HAL_GPIO_Init+0x80>)
 8001c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c10:	08001c8b 	.word	0x08001c8b
 8001c14:	08001c65 	.word	0x08001c65
 8001c18:	08001c77 	.word	0x08001c77
 8001c1c:	08001cb9 	.word	0x08001cb9
 8001c20:	08001cbf 	.word	0x08001cbf
 8001c24:	08001cbf 	.word	0x08001cbf
 8001c28:	08001cbf 	.word	0x08001cbf
 8001c2c:	08001cbf 	.word	0x08001cbf
 8001c30:	08001cbf 	.word	0x08001cbf
 8001c34:	08001cbf 	.word	0x08001cbf
 8001c38:	08001cbf 	.word	0x08001cbf
 8001c3c:	08001cbf 	.word	0x08001cbf
 8001c40:	08001cbf 	.word	0x08001cbf
 8001c44:	08001cbf 	.word	0x08001cbf
 8001c48:	08001cbf 	.word	0x08001cbf
 8001c4c:	08001cbf 	.word	0x08001cbf
 8001c50:	08001cbf 	.word	0x08001cbf
 8001c54:	08001c6d 	.word	0x08001c6d
 8001c58:	08001c81 	.word	0x08001c81
 8001c5c:	4a82      	ldr	r2, [pc, #520]	; (8001e68 <HAL_GPIO_Init+0x2d8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c62:	e02c      	b.n	8001cbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	623b      	str	r3, [r7, #32]
          break;
 8001c6a:	e029      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	3304      	adds	r3, #4
 8001c72:	623b      	str	r3, [r7, #32]
          break;
 8001c74:	e024      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	3308      	adds	r3, #8
 8001c7c:	623b      	str	r3, [r7, #32]
          break;
 8001c7e:	e01f      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	330c      	adds	r3, #12
 8001c86:	623b      	str	r3, [r7, #32]
          break;
 8001c88:	e01a      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c92:	2304      	movs	r3, #4
 8001c94:	623b      	str	r3, [r7, #32]
          break;
 8001c96:	e013      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d105      	bne.n	8001cac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	611a      	str	r2, [r3, #16]
          break;
 8001caa:	e009      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cac:	2308      	movs	r3, #8
 8001cae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	615a      	str	r2, [r3, #20]
          break;
 8001cb6:	e003      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	623b      	str	r3, [r7, #32]
          break;
 8001cbc:	e000      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          break;
 8001cbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2bff      	cmp	r3, #255	; 0xff
 8001cc4:	d801      	bhi.n	8001cca <HAL_GPIO_Init+0x13a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	e001      	b.n	8001cce <HAL_GPIO_Init+0x13e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2bff      	cmp	r3, #255	; 0xff
 8001cd4:	d802      	bhi.n	8001cdc <HAL_GPIO_Init+0x14c>
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	e002      	b.n	8001ce2 <HAL_GPIO_Init+0x152>
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	3b08      	subs	r3, #8
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	210f      	movs	r1, #15
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	6a39      	ldr	r1, [r7, #32]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8090 	beq.w	8001e30 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d10:	4b56      	ldr	r3, [pc, #344]	; (8001e6c <HAL_GPIO_Init+0x2dc>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a55      	ldr	r2, [pc, #340]	; (8001e6c <HAL_GPIO_Init+0x2dc>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_GPIO_Init+0x2dc>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d28:	4a51      	ldr	r2, [pc, #324]	; (8001e70 <HAL_GPIO_Init+0x2e0>)
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a49      	ldr	r2, [pc, #292]	; (8001e74 <HAL_GPIO_Init+0x2e4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00d      	beq.n	8001d70 <HAL_GPIO_Init+0x1e0>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a48      	ldr	r2, [pc, #288]	; (8001e78 <HAL_GPIO_Init+0x2e8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <HAL_GPIO_Init+0x1dc>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <HAL_GPIO_Init+0x2ec>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d101      	bne.n	8001d68 <HAL_GPIO_Init+0x1d8>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e004      	b.n	8001d72 <HAL_GPIO_Init+0x1e2>
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e002      	b.n	8001d72 <HAL_GPIO_Init+0x1e2>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_GPIO_Init+0x1e2>
 8001d70:	2300      	movs	r3, #0
 8001d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d74:	f002 0203 	and.w	r2, r2, #3
 8001d78:	0092      	lsls	r2, r2, #2
 8001d7a:	4093      	lsls	r3, r2
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d82:	493b      	ldr	r1, [pc, #236]	; (8001e70 <HAL_GPIO_Init+0x2e0>)
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	3302      	adds	r3, #2
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4937      	ldr	r1, [pc, #220]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001daa:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	4933      	ldr	r1, [pc, #204]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	492d      	ldr	r1, [pc, #180]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60cb      	str	r3, [r1, #12]
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4929      	ldr	r1, [pc, #164]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4923      	ldr	r1, [pc, #140]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	491f      	ldr	r1, [pc, #124]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4919      	ldr	r1, [pc, #100]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4915      	ldr	r1, [pc, #84]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	3301      	adds	r3, #1
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f47f aeaf 	bne.w	8001ba4 <HAL_GPIO_Init+0x14>
  }
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	372c      	adds	r7, #44	; 0x2c
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	10320000 	.word	0x10320000
 8001e58:	10310000 	.word	0x10310000
 8001e5c:	10220000 	.word	0x10220000
 8001e60:	10210000 	.word	0x10210000
 8001e64:	10120000 	.word	0x10120000
 8001e68:	10110000 	.word	0x10110000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40010800 	.word	0x40010800
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	40011000 	.word	0x40011000
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e001      	b.n	8001ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	807b      	strh	r3, [r7, #2]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec2:	787b      	ldrb	r3, [r7, #1]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec8:	887a      	ldrh	r2, [r7, #2]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ece:	e003      	b.n	8001ed8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	041a      	lsls	r2, r3, #16
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	611a      	str	r2, [r3, #16]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e26c      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8087 	beq.w	8002012 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f04:	4b92      	ldr	r3, [pc, #584]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d00c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f10:	4b8f      	ldr	r3, [pc, #572]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d112      	bne.n	8001f42 <HAL_RCC_OscConfig+0x5e>
 8001f1c:	4b8c      	ldr	r3, [pc, #560]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f28:	d10b      	bne.n	8001f42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2a:	4b89      	ldr	r3, [pc, #548]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d06c      	beq.n	8002010 <HAL_RCC_OscConfig+0x12c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d168      	bne.n	8002010 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e246      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x76>
 8001f4c:	4b80      	ldr	r3, [pc, #512]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a7f      	ldr	r2, [pc, #508]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e02e      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x98>
 8001f62:	4b7b      	ldr	r3, [pc, #492]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7a      	ldr	r2, [pc, #488]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b78      	ldr	r3, [pc, #480]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a77      	ldr	r2, [pc, #476]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01d      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xbc>
 8001f86:	4b72      	ldr	r3, [pc, #456]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a71      	ldr	r2, [pc, #452]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b6f      	ldr	r3, [pc, #444]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6e      	ldr	r2, [pc, #440]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001fa0:	4b6b      	ldr	r3, [pc, #428]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6a      	ldr	r2, [pc, #424]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b68      	ldr	r3, [pc, #416]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a67      	ldr	r2, [pc, #412]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fcce 	bl	8001960 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fcca 	bl	8001960 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1fa      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xe4>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fcba 	bl	8001960 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fcb6 	bl	8001960 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1e6      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	4b53      	ldr	r3, [pc, #332]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x10c>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d063      	beq.n	80020e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201e:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800202a:	4b49      	ldr	r3, [pc, #292]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b08      	cmp	r3, #8
 8002034:	d11c      	bne.n	8002070 <HAL_RCC_OscConfig+0x18c>
 8002036:	4b46      	ldr	r3, [pc, #280]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	4b43      	ldr	r3, [pc, #268]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x176>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1ba      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4939      	ldr	r1, [pc, #228]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e03a      	b.n	80020e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7ff fc6f 	bl	8001960 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002086:	f7ff fc6b 	bl	8001960 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e19b      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a4:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4927      	ldr	r1, [pc, #156]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
 80020b8:	e015      	b.n	80020e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ba:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7ff fc4e 	bl	8001960 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c8:	f7ff fc4a 	bl	8001960 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e17a      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d03a      	beq.n	8002168 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d019      	beq.n	800212e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7ff fc2e 	bl	8001960 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002108:	f7ff fc2a 	bl	8001960 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e15a      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002126:	2001      	movs	r0, #1
 8002128:	f000 fa9a 	bl	8002660 <RCC_Delay>
 800212c:	e01c      	b.n	8002168 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7ff fc14 	bl	8001960 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213a:	e00f      	b.n	800215c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213c:	f7ff fc10 	bl	8001960 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d908      	bls.n	800215c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e140      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	42420000 	.word	0x42420000
 8002158:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	4b9e      	ldr	r3, [pc, #632]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e9      	bne.n	800213c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a6 	beq.w	80022c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217a:	4b97      	ldr	r3, [pc, #604]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10d      	bne.n	80021a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4b94      	ldr	r3, [pc, #592]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a93      	ldr	r2, [pc, #588]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	61d3      	str	r3, [r2, #28]
 8002192:	4b91      	ldr	r3, [pc, #580]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219e:	2301      	movs	r3, #1
 80021a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a2:	4b8e      	ldr	r3, [pc, #568]	; (80023dc <HAL_RCC_OscConfig+0x4f8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ae:	4b8b      	ldr	r3, [pc, #556]	; (80023dc <HAL_RCC_OscConfig+0x4f8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a8a      	ldr	r2, [pc, #552]	; (80023dc <HAL_RCC_OscConfig+0x4f8>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ba:	f7ff fbd1 	bl	8001960 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c2:	f7ff fbcd 	bl	8001960 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b64      	cmp	r3, #100	; 0x64
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0fd      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	4b81      	ldr	r3, [pc, #516]	; (80023dc <HAL_RCC_OscConfig+0x4f8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x312>
 80021e8:	4b7b      	ldr	r3, [pc, #492]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4a7a      	ldr	r2, [pc, #488]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6213      	str	r3, [r2, #32]
 80021f4:	e02d      	b.n	8002252 <HAL_RCC_OscConfig+0x36e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x334>
 80021fe:	4b76      	ldr	r3, [pc, #472]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a75      	ldr	r2, [pc, #468]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6213      	str	r3, [r2, #32]
 800220a:	4b73      	ldr	r3, [pc, #460]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4a72      	ldr	r2, [pc, #456]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	6213      	str	r3, [r2, #32]
 8002216:	e01c      	b.n	8002252 <HAL_RCC_OscConfig+0x36e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b05      	cmp	r3, #5
 800221e:	d10c      	bne.n	800223a <HAL_RCC_OscConfig+0x356>
 8002220:	4b6d      	ldr	r3, [pc, #436]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4a6c      	ldr	r2, [pc, #432]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	4b6a      	ldr	r3, [pc, #424]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4a69      	ldr	r2, [pc, #420]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6213      	str	r3, [r2, #32]
 8002238:	e00b      	b.n	8002252 <HAL_RCC_OscConfig+0x36e>
 800223a:	4b67      	ldr	r3, [pc, #412]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a66      	ldr	r2, [pc, #408]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	4b64      	ldr	r3, [pc, #400]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a63      	ldr	r2, [pc, #396]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d015      	beq.n	8002286 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff fb81 	bl	8001960 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7ff fb7d 	bl	8001960 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0ab      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002278:	4b57      	ldr	r3, [pc, #348]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ee      	beq.n	8002262 <HAL_RCC_OscConfig+0x37e>
 8002284:	e014      	b.n	80022b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7ff fb6b 	bl	8001960 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7ff fb67 	bl	8001960 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	; 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e095      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a4:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1ee      	bne.n	800228e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b6:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4a47      	ldr	r2, [pc, #284]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8081 	beq.w	80023ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022cc:	4b42      	ldr	r3, [pc, #264]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d061      	beq.n	800239c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d146      	bne.n	800236e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e0:	4b3f      	ldr	r3, [pc, #252]	; (80023e0 <HAL_RCC_OscConfig+0x4fc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7ff fb3b 	bl	8001960 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7ff fb37 	bl	8001960 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e067      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002314:	d108      	bne.n	8002328 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002316:	4b30      	ldr	r3, [pc, #192]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	492d      	ldr	r1, [pc, #180]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a19      	ldr	r1, [r3, #32]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	430b      	orrs	r3, r1
 800233a:	4927      	ldr	r1, [pc, #156]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <HAL_RCC_OscConfig+0x4fc>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7ff fb0b 	bl	8001960 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234e:	f7ff fb07 	bl	8001960 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e037      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x46a>
 800236c:	e02f      	b.n	80023ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <HAL_RCC_OscConfig+0x4fc>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff faf4 	bl	8001960 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff faf0 	bl	8001960 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e020      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x498>
 800239a:	e018      	b.n	80023ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e013      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	42420060 	.word	0x42420060

080023e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0d0      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f8:	4b6a      	ldr	r3, [pc, #424]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d910      	bls.n	8002428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b67      	ldr	r3, [pc, #412]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 0207 	bic.w	r2, r3, #7
 800240e:	4965      	ldr	r1, [pc, #404]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b63      	ldr	r3, [pc, #396]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0b8      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800244a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002458:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b50      	ldr	r3, [pc, #320]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	494d      	ldr	r1, [pc, #308]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d040      	beq.n	8002504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d115      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e07f      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e073      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e06b      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4936      	ldr	r1, [pc, #216]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d4:	f7ff fa44 	bl	8001960 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7ff fa40 	bl	8001960 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e053      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d210      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 0207 	bic.w	r2, r3, #7
 800251a:	4922      	ldr	r1, [pc, #136]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e032      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4916      	ldr	r1, [pc, #88]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	490e      	ldr	r1, [pc, #56]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002572:	f000 f821 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002576:	4602      	mov	r2, r0
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	490a      	ldr	r1, [pc, #40]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	5ccb      	ldrb	r3, [r1, r3]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <HAL_RCC_ClockConfig+0x1cc>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff f9a2 	bl	80018dc <HAL_InitTick>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08002edc 	.word	0x08002edc
 80025b0:	20000048 	.word	0x20000048
 80025b4:	2000004c 	.word	0x2000004c

080025b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <HAL_RCC_GetSysClockFreq+0x94>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d002      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x30>
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x36>
 80025e6:	e027      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ea:	613b      	str	r3, [r7, #16]
      break;
 80025ec:	e027      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	0c9b      	lsrs	r3, r3, #18
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	4a17      	ldr	r2, [pc, #92]	; (8002654 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d010      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_RCC_GetSysClockFreq+0x94>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	0c5b      	lsrs	r3, r3, #17
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	4a11      	ldr	r2, [pc, #68]	; (8002658 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <HAL_RCC_GetSysClockFreq+0x98>)
 800261a:	fb02 f203 	mul.w	r2, r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e004      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a0c      	ldr	r2, [pc, #48]	; (800265c <HAL_RCC_GetSysClockFreq+0xa4>)
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	613b      	str	r3, [r7, #16]
      break;
 8002636:	e002      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_GetSysClockFreq+0x98>)
 800263a:	613b      	str	r3, [r7, #16]
      break;
 800263c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263e:	693b      	ldr	r3, [r7, #16]
}
 8002640:	4618      	mov	r0, r3
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	007a1200 	.word	0x007a1200
 8002654:	08002eec 	.word	0x08002eec
 8002658:	08002efc 	.word	0x08002efc
 800265c:	003d0900 	.word	0x003d0900

08002660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <RCC_Delay+0x34>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <RCC_Delay+0x38>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	0a5b      	lsrs	r3, r3, #9
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800267c:	bf00      	nop
  }
  while (Delay --);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1e5a      	subs	r2, r3, #1
 8002682:	60fa      	str	r2, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f9      	bne.n	800267c <RCC_Delay+0x1c>
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	20000048 	.word	0x20000048
 8002698:	10624dd3 	.word	0x10624dd3

0800269c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e041      	b.n	8002732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff f872 	bl	80017ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3304      	adds	r3, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4610      	mov	r0, r2
 80026dc:	f000 fa6e 	bl	8002bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d001      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e035      	b.n	80027c0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a16      	ldr	r2, [pc, #88]	; (80027cc <HAL_TIM_Base_Start_IT+0x90>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d009      	beq.n	800278a <HAL_TIM_Base_Start_IT+0x4e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277e:	d004      	beq.n	800278a <HAL_TIM_Base_Start_IT+0x4e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <HAL_TIM_Base_Start_IT+0x94>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d111      	bne.n	80027ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b06      	cmp	r3, #6
 800279a:	d010      	beq.n	80027be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ac:	e007      	b.n	80027be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40000400 	.word	0x40000400

080027d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d122      	bne.n	8002830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d11b      	bne.n	8002830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0202 	mvn.w	r2, #2
 8002800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f9b4 	bl	8002b84 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f9a7 	bl	8002b72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f9b6 	bl	8002b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b04      	cmp	r3, #4
 800283c:	d122      	bne.n	8002884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d11b      	bne.n	8002884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0204 	mvn.w	r2, #4
 8002854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2202      	movs	r2, #2
 800285a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f98a 	bl	8002b84 <HAL_TIM_IC_CaptureCallback>
 8002870:	e005      	b.n	800287e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f97d 	bl	8002b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f98c 	bl	8002b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b08      	cmp	r3, #8
 8002890:	d122      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b08      	cmp	r3, #8
 800289e:	d11b      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0208 	mvn.w	r2, #8
 80028a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2204      	movs	r2, #4
 80028ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f960 	bl	8002b84 <HAL_TIM_IC_CaptureCallback>
 80028c4:	e005      	b.n	80028d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f953 	bl	8002b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f962 	bl	8002b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d122      	bne.n	800292c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d11b      	bne.n	800292c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0210 	mvn.w	r2, #16
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2208      	movs	r2, #8
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f936 	bl	8002b84 <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f929 	bl	8002b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f938 	bl	8002b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d10e      	bne.n	8002958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d107      	bne.n	8002958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0201 	mvn.w	r2, #1
 8002950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fdd8 	bl	8001508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d10e      	bne.n	8002984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002970:	2b80      	cmp	r3, #128	; 0x80
 8002972:	d107      	bne.n	8002984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800297c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa6b 	bl	8002e5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	2b40      	cmp	r3, #64	; 0x40
 8002990:	d10e      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d107      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8fc 	bl	8002ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d10e      	bne.n	80029dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d107      	bne.n	80029dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0220 	mvn.w	r2, #32
 80029d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fa36 	bl	8002e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_TIM_ConfigClockSource+0x1c>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e0b4      	b.n	8002b6a <HAL_TIM_ConfigClockSource+0x186>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a38:	d03e      	beq.n	8002ab8 <HAL_TIM_ConfigClockSource+0xd4>
 8002a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3e:	f200 8087 	bhi.w	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a46:	f000 8086 	beq.w	8002b56 <HAL_TIM_ConfigClockSource+0x172>
 8002a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4e:	d87f      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a50:	2b70      	cmp	r3, #112	; 0x70
 8002a52:	d01a      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0xa6>
 8002a54:	2b70      	cmp	r3, #112	; 0x70
 8002a56:	d87b      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a58:	2b60      	cmp	r3, #96	; 0x60
 8002a5a:	d050      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x11a>
 8002a5c:	2b60      	cmp	r3, #96	; 0x60
 8002a5e:	d877      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a60:	2b50      	cmp	r3, #80	; 0x50
 8002a62:	d03c      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0xfa>
 8002a64:	2b50      	cmp	r3, #80	; 0x50
 8002a66:	d873      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d058      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x13a>
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d86f      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a70:	2b30      	cmp	r3, #48	; 0x30
 8002a72:	d064      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x15a>
 8002a74:	2b30      	cmp	r3, #48	; 0x30
 8002a76:	d86b      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d060      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x15a>
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d867      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d05c      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x15a>
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d05a      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x15a>
 8002a88:	e062      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f000 f95e 	bl	8002d5a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	609a      	str	r2, [r3, #8]
      break;
 8002ab6:	e04f      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6899      	ldr	r1, [r3, #8]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f000 f947 	bl	8002d5a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ada:	609a      	str	r2, [r3, #8]
      break;
 8002adc:	e03c      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f000 f8be 	bl	8002c6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2150      	movs	r1, #80	; 0x50
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f915 	bl	8002d26 <TIM_ITRx_SetConfig>
      break;
 8002afc:	e02c      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f000 f8dc 	bl	8002cc8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2160      	movs	r1, #96	; 0x60
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f905 	bl	8002d26 <TIM_ITRx_SetConfig>
      break;
 8002b1c:	e01c      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f000 f89e 	bl	8002c6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2140      	movs	r1, #64	; 0x40
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f8f5 	bl	8002d26 <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e00c      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4619      	mov	r1, r3
 8002b48:	4610      	mov	r0, r2
 8002b4a:	f000 f8ec 	bl	8002d26 <TIM_ITRx_SetConfig>
      break;
 8002b4e:	e003      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      break;
 8002b54:	e000      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
	...

08002bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a25      	ldr	r2, [pc, #148]	; (8002c64 <TIM_Base_SetConfig+0xa8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d007      	beq.n	8002be4 <TIM_Base_SetConfig+0x28>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bda:	d003      	beq.n	8002be4 <TIM_Base_SetConfig+0x28>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a22      	ldr	r2, [pc, #136]	; (8002c68 <TIM_Base_SetConfig+0xac>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d108      	bne.n	8002bf6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <TIM_Base_SetConfig+0xa8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <TIM_Base_SetConfig+0x52>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c04:	d003      	beq.n	8002c0e <TIM_Base_SetConfig+0x52>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <TIM_Base_SetConfig+0xac>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <TIM_Base_SetConfig+0xa8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d103      	bne.n	8002c54 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	615a      	str	r2, [r3, #20]
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40000400 	.word	0x40000400

08002c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f023 0201 	bic.w	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f023 030a 	bic.w	r3, r3, #10
 8002ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	621a      	str	r2, [r3, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f023 0210 	bic.w	r2, r3, #16
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	031b      	lsls	r3, r3, #12
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	621a      	str	r2, [r3, #32]
}
 8002d1c:	bf00      	nop
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f043 0307 	orr.w	r3, r3, #7
 8002d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	609a      	str	r2, [r3, #8]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b087      	sub	sp, #28
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	021a      	lsls	r2, r3, #8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	609a      	str	r2, [r3, #8]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e041      	b.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d009      	beq.n	8002e08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfc:	d004      	beq.n	8002e08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d10c      	bne.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40000400 	.word	0x40000400

08002e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <__libc_init_array>:
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	2600      	movs	r6, #0
 8002e70:	4d0c      	ldr	r5, [pc, #48]	; (8002ea4 <__libc_init_array+0x38>)
 8002e72:	4c0d      	ldr	r4, [pc, #52]	; (8002ea8 <__libc_init_array+0x3c>)
 8002e74:	1b64      	subs	r4, r4, r5
 8002e76:	10a4      	asrs	r4, r4, #2
 8002e78:	42a6      	cmp	r6, r4
 8002e7a:	d109      	bne.n	8002e90 <__libc_init_array+0x24>
 8002e7c:	f000 f822 	bl	8002ec4 <_init>
 8002e80:	2600      	movs	r6, #0
 8002e82:	4d0a      	ldr	r5, [pc, #40]	; (8002eac <__libc_init_array+0x40>)
 8002e84:	4c0a      	ldr	r4, [pc, #40]	; (8002eb0 <__libc_init_array+0x44>)
 8002e86:	1b64      	subs	r4, r4, r5
 8002e88:	10a4      	asrs	r4, r4, #2
 8002e8a:	42a6      	cmp	r6, r4
 8002e8c:	d105      	bne.n	8002e9a <__libc_init_array+0x2e>
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e94:	4798      	blx	r3
 8002e96:	3601      	adds	r6, #1
 8002e98:	e7ee      	b.n	8002e78 <__libc_init_array+0xc>
 8002e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9e:	4798      	blx	r3
 8002ea0:	3601      	adds	r6, #1
 8002ea2:	e7f2      	b.n	8002e8a <__libc_init_array+0x1e>
 8002ea4:	08002f00 	.word	0x08002f00
 8002ea8:	08002f00 	.word	0x08002f00
 8002eac:	08002f00 	.word	0x08002f00
 8002eb0:	08002f04 	.word	0x08002f04

08002eb4 <memset>:
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4402      	add	r2, r0
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d100      	bne.n	8002ebe <memset+0xa>
 8002ebc:	4770      	bx	lr
 8002ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec2:	e7f9      	b.n	8002eb8 <memset+0x4>

08002ec4 <_init>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	bf00      	nop
 8002ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eca:	bc08      	pop	{r3}
 8002ecc:	469e      	mov	lr, r3
 8002ece:	4770      	bx	lr

08002ed0 <_fini>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	bf00      	nop
 8002ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed6:	bc08      	pop	{r3}
 8002ed8:	469e      	mov	lr, r3
 8002eda:	4770      	bx	lr
